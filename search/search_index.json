{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Zenoh Multi-Protocol Bridge","text":"![Project Banner](assets/nodered.png)  **A comprehensive multi-protocol bridge system connecting Zenoh, MQTT, and ROS2**  [![License](https://img.shields.io/badge/license-Apache%202.0-blue.svg)](LICENSE) [![Docker](https://img.shields.io/badge/docker-ready-brightgreen.svg)](https://www.docker.com/) [![ROS2](https://img.shields.io/badge/ROS2-Humble-blue.svg)](https://docs.ros.org/en/humble/)"},{"location":"#overview","title":"\ud83c\udfaf Overview","text":"<p>The Zenoh Multi-Protocol Bridge Project is a comprehensive solution designed to enable seamless data transfer between different communication protocols commonly used in IoT, robotics, and distributed systems. This project bridges Zenoh, MQTT, and ROS2 protocols, allowing them to work together in modern IoT and robotics ecosystems.</p>"},{"location":"#key-features","title":"\u2728 Key Features","text":"<ul> <li>\ud83d\udd04 Multi-Protocol Translation: Seamless data transfer between MQTT, Zenoh, and ROS2 protocols</li> <li>\u26a1 Real-Time Communication: Instant processing of sensor and robotics data</li> <li>\ud83d\udcc8 Scalable Architecture: Docker-based microservices structure</li> <li>\ud83d\udcca Monitoring and Control: Visual flow control with Node-RED</li> <li>\ud83e\udd16 Robotics Integration: ROS2 DDS bridge for robotics applications</li> <li>\ud83e\uddea Testing Environment: Comprehensive testable system with multiple protocol support</li> </ul>"},{"location":"#project-objectives","title":"\ud83c\udfaf Project Objectives","text":"<p>This project serves multiple purposes in modern distributed systems:</p> <ol> <li>Multi-Protocol Translation: Enable data transfer between MQTT, Zenoh, and ROS2 protocols</li> <li>Real-Time Communication: Provide instant processing of sensor and robotics data</li> <li>Scalable Architecture: Offer a Docker-based microservices structure</li> <li>Monitoring and Control: Include visual flow control with Node-RED</li> <li>Robotics Integration: Support ROS2 DDS bridge for robotics applications</li> <li>Testing Environment: Provide a comprehensive testable system with multiple protocol support</li> </ol>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>Get started with the Zenoh Multi-Protocol Bridge in just a few steps:</p> <pre><code># Clone the repository\ngit clone https://github.com/harunkurtdev/zenoh-multi-bridge.git\ncd zenoh-multi-bridge\n\n# Start all services\ndocker-compose up -d\n\n# Follow logs for all services\ndocker-compose logs -f\n</code></pre> <p>Visit the web interfaces:</p> <ul> <li>Node-RED Dashboard: http://localhost:1880</li> <li>Zenoh REST API: http://localhost:8000</li> <li>MQTT Bridge API: http://localhost:8001</li> <li>ROS2 Bridge API: http://localhost:8002</li> <li>Foxglove Studio: http://localhost:8765</li> </ul>"},{"location":"#system-components","title":"\ud83d\udccb System Components","text":"<p>The system consists of several interconnected components:</p> Component Description Port(s) Zenoh Router Central router for Zenoh network 7447, 8000 MQTT Broker Eclipse Mosquitto message broker 1883, 9001 Zenoh-MQTT Bridge Protocol bridge between MQTT and Zenoh 8001, 1884 ROS2 Humble ROS2 robotics framework 8765 Zenoh-ROS2DDS Bridge Protocol bridge between ROS2 DDS and Zenoh 8002, 7449 Node-RED Visual flow editor and automation 1880"},{"location":"#data-flow","title":"\ud83d\udd04 Data Flow","text":"<pre><code>graph LR\n    A[MQTT Publisher] --&gt;|MQTT| B[Zenoh-MQTT Bridge]\n    B --&gt;|Zenoh| C[Zenoh Router]\n    C --&gt;|Zenoh| D[Zenoh-ROS2DDS Bridge]\n    D --&gt;|DDS| E[ROS2 Humble]\n    C --&gt;|Zenoh| F[Zenoh Subscriber]\n    B --&gt;|MQTT| G[MQTT Broker]\n    G --&gt;|MQTT| H[MQTT Subscriber]\n    C --&gt;|Monitor| I[Node-RED]</code></pre>"},{"location":"#use-cases","title":"\ud83c\udfaf Use Cases","text":""},{"location":"#iot-robotics-integration","title":"IoT-Robotics Integration","text":"<p>Connect sensor data from IoT devices (MQTT) to robot control systems (ROS2) for real-time environmental data processing in autonomous robots.</p>"},{"location":"#hybrid-communication-systems","title":"Hybrid Communication Systems","text":"<p>Integrate legacy MQTT infrastructure with modern Zenoh protocol adoption and ROS2 robotics ecosystem connectivity.</p>"},{"location":"#research-and-development","title":"Research and Development","text":"<p>Provide a multi-protocol testing environment for performance comparison and development sandbox for distributed systems.</p>"},{"location":"#industrial-automation","title":"Industrial Automation","text":"<p>Enable communication between SCADA systems (MQTT) and robot controllers (ROS2) with real-time monitoring capabilities.</p>"},{"location":"#smart-city-applications","title":"Smart City Applications","text":"<p>Facilitate communication between IoT sensors and autonomous vehicles for traffic management and environmental monitoring.</p>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<ul> <li>Getting Started: Installation, prerequisites, and quick start guides</li> <li>Architecture: System architecture, components, and data flow</li> <li>Components: Detailed documentation for each system component</li> <li>Configuration: Configuration guides for bridges and services</li> <li>Usage: Testing procedures and monitoring guides</li> <li>Use Cases: Real-world application examples</li> <li>API Reference: REST API endpoints and documentation</li> </ul>"},{"location":"#contributing","title":"\ud83e\udd1d Contributing","text":"<p>Contributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.</p>"},{"location":"#license","title":"\ud83d\udcc4 License","text":"<p>This project is licensed under the Apache License 2.0 - see the LICENSE file for details.</p>"},{"location":"#acknowledgments","title":"\ud83d\ude4f Acknowledgments","text":"<ul> <li>Eclipse Zenoh - Zero Overhead Pub/Sub, Store/Query and Compute</li> <li>Eclipse Mosquitto - An open source MQTT broker</li> <li>ROS2 - Robot Operating System 2</li> <li>Node-RED - Low-code programming for event-driven applications</li> </ul>"},{"location":"#support","title":"\ud83d\udcde Support","text":"<p>For questions and support, please open an issue on the GitHub repository.</p>"},{"location":"contributing/","title":"Contributing to Zenoh Multi-Protocol Bridge","text":"<p>Thank you for your interest in contributing to the Zenoh Multi-Protocol Bridge project! This document provides guidelines and instructions for contributing.</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>Getting Started</li> <li>How to Contribute</li> <li>Development Setup</li> <li>Coding Standards</li> <li>Testing Guidelines</li> <li>Submitting Changes</li> <li>Documentation</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project adheres to a code of conduct that all contributors are expected to follow:</p> <ul> <li>Be Respectful: Treat everyone with respect and consideration</li> <li>Be Collaborative: Work together and help each other</li> <li>Be Inclusive: Welcome and support people of all backgrounds</li> <li>Be Professional: Maintain professionalism in all interactions</li> </ul>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<p>Before contributing, ensure you have:</p> <ul> <li>Git installed</li> <li>Docker and Docker Compose</li> <li>Basic understanding of the technologies used:</li> <li>Zenoh protocol</li> <li>MQTT</li> <li>ROS2 (for robotics-related contributions)</li> <li>Docker containers</li> </ul>"},{"location":"contributing/#fork-and-clone","title":"Fork and Clone","text":"<ol> <li>Fork the repository on GitHub</li> <li> <p>Clone your fork locally:    <pre><code>git clone https://github.com/YOUR-USERNAME/zenoh-multi-bridge.git\ncd zenoh-multi-bridge\n</code></pre></p> </li> <li> <p>Add upstream remote:    <pre><code>git remote add upstream https://github.com/harunkurtdev/zenoh-multi-bridge.git\n</code></pre></p> </li> </ol>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":""},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>When reporting bugs, please include:</p> <ol> <li>Clear Title: Descriptive summary of the issue</li> <li>Description: Detailed explanation of the problem</li> <li>Steps to Reproduce:    <pre><code>1. Start services with 'docker-compose up'\n2. Run command X\n3. Observe error Y\n</code></pre></li> <li>Expected Behavior: What should happen</li> <li>Actual Behavior: What actually happens</li> <li>Environment:</li> <li>OS: (e.g., Ubuntu 22.04)</li> <li>Docker version: (e.g., 24.0.5)</li> <li>Docker Compose version: (e.g., 2.20.2)</li> <li>Logs: Relevant log output    <pre><code>docker-compose logs [service-name]\n</code></pre></li> </ol>"},{"location":"contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>Enhancement suggestions are welcome! Please include:</p> <ol> <li>Use Case: Why is this enhancement needed?</li> <li>Proposed Solution: How should it work?</li> <li>Alternatives: Other approaches you've considered</li> <li>Additional Context: Screenshots, diagrams, etc.</li> </ol>"},{"location":"contributing/#contributing-code","title":"Contributing Code","text":"<p>Types of contributions we welcome:</p> <ul> <li>Bug fixes: Corrections to existing functionality</li> <li>New features: Additional capabilities</li> <li>Performance improvements: Optimizations</li> <li>Documentation: Improvements to docs</li> <li>Examples: New use case examples</li> <li>Tests: Additional test coverage</li> </ul>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#1-local-environment","title":"1. Local Environment","text":"<pre><code># Clone repository\ngit clone https://github.com/YOUR-USERNAME/zenoh-multi-bridge.git\ncd zenoh-multi-bridge\n\n# Create a feature branch\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"contributing/#2-build-and-test","title":"2. Build and Test","text":"<pre><code># Build custom images\ndocker-compose build\n\n# Start services\ndocker-compose up -d\n\n# View logs\ndocker-compose logs -f\n\n# Run tests (if available)\n./run-tests.sh  # Add this if you create test scripts\n</code></pre>"},{"location":"contributing/#3-make-changes","title":"3. Make Changes","text":"<ul> <li>Modify code or configuration files</li> <li>Test your changes locally</li> <li>Ensure all services still work together</li> </ul>"},{"location":"contributing/#4-test-your-changes","title":"4. Test Your Changes","text":"<pre><code># Restart affected services\ndocker-compose restart [service-name]\n\n# Test end-to-end\npython3 pub.py  # Terminal 1\npython3 sub.py  # Terminal 2\n\n# Check logs for errors\ndocker-compose logs | grep -i error\n</code></pre>"},{"location":"contributing/#coding-standards","title":"Coding Standards","text":""},{"location":"contributing/#configuration-files","title":"Configuration Files","text":"<ul> <li>Use JSON5 format for Zenoh configurations</li> <li>Include comments explaining non-obvious settings</li> <li>Follow existing file structure</li> </ul> <p>Example: <pre><code>{\n  // Client mode connects to existing router\n  mode: \"client\",\n\n  // Connection endpoint\n  connect: {\n    endpoints: [\"tcp/zenoh-router:7447\"],\n  },\n\n  // Plugin configuration\n  plugins: {\n    mqtt: {\n      // MQTT server port\n      port: \"0.0.0.0:1884\",\n      // Scope prefix for topics\n      scope: \"mqtt/demo\",\n    }\n  }\n}\n</code></pre></p>"},{"location":"contributing/#docker-compose","title":"Docker Compose","text":"<ul> <li>Keep service definitions organized</li> <li>Use meaningful container names</li> <li>Document non-standard ports</li> <li>Include restart policies</li> </ul> <pre><code>services:\n  service-name:\n    container_name: service-name\n    image: image:tag\n    restart: unless-stopped\n    ports:\n      - \"host:container\"  # Document purpose\n    environment:\n      - VAR_NAME=value\n    networks:\n      - zenoh-mqtt-net\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ul> <li>Use Markdown format</li> <li>Include code examples</li> <li>Add diagrams where helpful (Mermaid syntax)</li> <li>Keep documentation up-to-date with code changes</li> </ul>"},{"location":"contributing/#testing-guidelines","title":"Testing Guidelines","text":""},{"location":"contributing/#manual-testing","title":"Manual Testing","text":"<ol> <li> <p>Start All Services <pre><code>docker-compose up -d\ndocker-compose ps  # Verify all running\n</code></pre></p> </li> <li> <p>Test MQTT Flow <pre><code># Terminal 1: Subscribe\nmosquitto_sub -h localhost -p 1883 -t 'test/#' -v\n\n# Terminal 2: Publish\nmosquitto_pub -h localhost -p 1884 -t 'test/msg' -m 'Hello'\n</code></pre></p> </li> <li> <p>Test Zenoh Flow <pre><code># Terminal 1: Subscribe\npython3 sub.py\n\n# Terminal 2: Publish\npython3 pub.py\n</code></pre></p> </li> <li> <p>Test Multi-Protocol</p> </li> <li>Publish to MQTT</li> <li>Verify in Zenoh subscriber</li> <li>Check ROS2 topics (if applicable)</li> </ol>"},{"location":"contributing/#integration-tests","title":"Integration Tests","text":"<p>If adding test scripts:</p> <pre><code>#!/bin/bash\n# test-integration.sh\n\nset -e\n\necho \"Starting services...\"\ndocker-compose up -d\n\necho \"Waiting for services to be ready...\"\nsleep 10\n\necho \"Testing MQTT to Zenoh bridge...\"\n# Add test commands\n\necho \"All tests passed!\"\n</code></pre>"},{"location":"contributing/#performance-testing","title":"Performance Testing","text":"<p>For performance-critical changes:</p> <pre><code># Measure message throughput\ndocker-compose logs zenoh-router | grep -c \"published\"\n\n# Check latency\n# Use timestamps in messages to measure end-to-end latency\n</code></pre>"},{"location":"contributing/#submitting-changes","title":"Submitting Changes","text":""},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>Use clear, descriptive commit messages:</p> <pre><code>Add support for custom MQTT topic filters\n\n- Implement configurable allow/deny patterns\n- Update configuration documentation\n- Add examples in README\n\nFixes #123\n</code></pre> <p>Format: - First line: Brief summary (50 chars or less) - Blank line - Detailed description (if needed) - Reference related issues</p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update Documentation</li> <li>Update README if needed</li> <li>Add/update relevant docs in <code>docs/</code></li> <li> <p>Update CHANGELOG if present</p> </li> <li> <p>Test Your Changes <pre><code>docker-compose down\ndocker-compose build\ndocker-compose up -d\n# Run manual tests\n</code></pre></p> </li> <li> <p>Create Pull Request</p> </li> <li>Push to your fork</li> <li>Open PR against <code>main</code> branch</li> <li>Fill out PR template (if available)</li> <li> <p>Link related issues</p> </li> <li> <p>PR Description Template <pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Performance improvement\n\n## Testing\n- [ ] Manual testing completed\n- [ ] All services start successfully\n- [ ] Multi-protocol communication works\n\n## Checklist\n- [ ] Code follows project style\n- [ ] Documentation updated\n- [ ] No breaking changes (or documented)\n\n## Related Issues\nFixes #123\n</code></pre></p> </li> <li> <p>Review Process</p> </li> <li>Respond to review comments</li> <li>Make requested changes</li> <li>Update PR as needed</li> </ol>"},{"location":"contributing/#after-pr-acceptance","title":"After PR Acceptance","text":"<ol> <li> <p>Sync with Upstream <pre><code>git checkout main\ngit fetch upstream\ngit merge upstream/main\ngit push origin main\n</code></pre></p> </li> <li> <p>Delete Feature Branch <pre><code>git branch -d feature/your-feature-name\ngit push origin --delete feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"contributing/#documentation_1","title":"Documentation","text":""},{"location":"contributing/#documentation-structure","title":"Documentation Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md              # Home page\n\u251c\u2500\u2500 getting-started/      # Installation, quick start\n\u251c\u2500\u2500 architecture/         # System design\n\u251c\u2500\u2500 components/           # Component details\n\u251c\u2500\u2500 configuration/        # Configuration guides\n\u251c\u2500\u2500 usage/                # Usage examples\n\u251c\u2500\u2500 use-cases/            # Real-world applications\n\u251c\u2500\u2500 api/                  # API reference\n\u2514\u2500\u2500 troubleshooting.md    # Problem solving\n</code></pre>"},{"location":"contributing/#writing-documentation","title":"Writing Documentation","text":"<ul> <li>Use clear, concise language</li> <li>Include practical examples</li> <li>Add diagrams for complex concepts</li> <li>Test all code examples</li> <li>Keep it updated with changes</li> </ul>"},{"location":"contributing/#building-documentation","title":"Building Documentation","text":"<pre><code># Install dependencies\npip install -r requirements.txt\n\n# Build documentation\nmkdocs build\n\n# Serve locally\nmkdocs serve\n\n# View at http://localhost:8000\n</code></pre>"},{"location":"contributing/#style-guide","title":"Style Guide","text":""},{"location":"contributing/#markdown","title":"Markdown","text":"<ul> <li>Use ATX-style headers (<code>#</code> not <code>===</code>)</li> <li>Include blank lines around code blocks</li> <li>Use fenced code blocks with language tags</li> <li>Keep lines under 120 characters when possible</li> </ul>"},{"location":"contributing/#code-examples","title":"Code Examples","text":"<pre><code># Good: Include comments and context\n# Start the MQTT publisher\nmosquitto_pub -h localhost -p 1884 -t 'sensor/temp' -m '{\"value\":25}'\n\n# Bad: No context or explanation\nmosquitto_pub -h localhost -p 1884 -t 'sensor/temp' -m '{\"value\":25}'\n</code></pre>"},{"location":"contributing/#communication","title":"Communication","text":""},{"location":"contributing/#channels","title":"Channels","text":"<ul> <li>GitHub Issues: Bug reports, feature requests</li> <li>Pull Requests: Code contributions</li> <li>Discussions: General questions, ideas</li> </ul>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<p>If you need help:</p> <ol> <li>Check existing documentation</li> <li>Search closed issues</li> <li>Ask in GitHub Discussions</li> <li>Open a new issue with \"question\" label</li> </ol>"},{"location":"contributing/#recognition","title":"Recognition","text":"<p>Contributors will be:</p> <ul> <li>Listed in CONTRIBUTORS file (if created)</li> <li>Mentioned in release notes</li> <li>Credited in commit history</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the same license as the project (Apache License 2.0).</p>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>If you have questions about contributing:</p> <ol> <li>Check this guide first</li> <li>Look at existing PRs for examples</li> <li>Open an issue with the \"question\" label</li> <li>We're here to help!</li> </ol> <p>Thank you for contributing to Zenoh Multi-Protocol Bridge! \ud83c\udf89</p>"},{"location":"troubleshooting/","title":"Troubleshooting Guide","text":"<p>This guide helps you diagnose and resolve common issues with the Zenoh Multi-Protocol Bridge.</p>"},{"location":"troubleshooting/#general-troubleshooting-steps","title":"General Troubleshooting Steps","text":""},{"location":"troubleshooting/#1-check-service-status","title":"1. Check Service Status","text":"<pre><code># List all containers and their status\ndocker-compose ps\n\n# Check if all services are running\ndocker ps --filter \"name=zenoh\" --filter \"name=mqtt\" --filter \"name=ros2\" --filter \"name=node-red\"\n</code></pre>"},{"location":"troubleshooting/#2-view-logs","title":"2. View Logs","text":"<pre><code># View all service logs\ndocker-compose logs -f\n\n# View specific service logs\ndocker-compose logs -f zenoh-router\ndocker-compose logs -f zenoh-mqtt-bridge\ndocker-compose logs -f zenoh-ros2dds-bridge\n</code></pre>"},{"location":"troubleshooting/#3-verify-network-connectivity","title":"3. Verify Network Connectivity","text":"<pre><code># Check Docker network\ndocker network inspect zenoh-mqtt-net\n\n# Test connectivity between services\ndocker exec zenoh-mqtt-bridge ping -c 2 zenoh-router\ndocker exec zenoh-ros2dds-bridge ping -c 2 zenoh-router\n</code></pre>"},{"location":"troubleshooting/#common-issues","title":"Common Issues","text":""},{"location":"troubleshooting/#services-wont-start","title":"Services Won't Start","text":""},{"location":"troubleshooting/#issue-port-already-in-use","title":"Issue: Port Already in Use","text":"<p>Symptoms: <pre><code>Error: Bind for 0.0.0.0:1883 failed: port is already allocated\n</code></pre></p> <p>Solution: <pre><code># Find process using the port\nlsof -i :1883\n# or\nnetstat -tuln | grep 1883\n\n# Stop the conflicting process or change port in docker-compose.yaml\n# Example: Change host port mapping\nports:\n  - \"1884:1883\"  # Maps host:1884 to container:1883\n</code></pre></p>"},{"location":"troubleshooting/#issue-docker-permission-denied","title":"Issue: Docker Permission Denied","text":"<p>Symptoms: <pre><code>Got permission denied while trying to connect to the Docker daemon socket\n</code></pre></p> <p>Solution: <pre><code># Add user to docker group\nsudo usermod -aG docker $USER\n\n# Apply group membership (or log out and back in)\nnewgrp docker\n\n# Verify\ndocker ps\n</code></pre></p>"},{"location":"troubleshooting/#issue-image-pull-fails","title":"Issue: Image Pull Fails","text":"<p>Symptoms: <pre><code>Error response from daemon: Get https://registry-1.docker.io/v2/: net/http: TLS handshake timeout\n</code></pre></p> <p>Solution: <pre><code># Check internet connectivity\nping -c 3 google.com\n\n# Retry with clean state\ndocker-compose down\ndocker-compose pull\ndocker-compose up -d\n\n# Or pull images individually\ndocker pull eclipse/zenoh:latest\ndocker pull eclipse/zenoh-bridge-mqtt:latest\ndocker pull eclipse-mosquitto:latest\n</code></pre></p>"},{"location":"troubleshooting/#messages-not-flowing","title":"Messages Not Flowing","text":""},{"location":"troubleshooting/#issue-mqtt-messages-not-reaching-zenoh","title":"Issue: MQTT Messages Not Reaching Zenoh","text":"<p>Symptoms: - MQTT publisher works - Zenoh subscriber receives nothing</p> <p>Diagnosis: <pre><code># Check MQTT bridge logs\ndocker-compose logs zenoh-mqtt-bridge | grep -i \"error\\|warn\"\n\n# Verify MQTT bridge is connected to Zenoh\ndocker-compose logs zenoh-mqtt-bridge | grep -i \"connect\"\n\n# Test direct MQTT connection to bridge\nmosquitto_pub -h localhost -p 1884 -t 'test/debug' -m 'test message' -d\n</code></pre></p> <p>Solution: <pre><code># Restart the bridge\ndocker-compose restart zenoh-mqtt-bridge\n\n# Check topic filters in config\ncat zenoh-mqtt-bridge/config.json5 | grep -A 5 \"allow\\|deny\"\n\n# Verify scope configuration\n# MQTT 'sensor/temp' should appear as 'mqtt/demo/sensor/temp' in Zenoh\n</code></pre></p>"},{"location":"troubleshooting/#issue-zenoh-messages-not-reaching-ros2","title":"Issue: Zenoh Messages Not Reaching ROS2","text":"<p>Symptoms: - Zenoh router works - ROS2 topics are empty</p> <p>Diagnosis: <pre><code># Check ROS2 bridge logs\ndocker-compose logs zenoh-ros2dds-bridge | grep -i \"error\\|warn\"\n\n# List ROS2 topics\ndocker exec -it ros2-humble ros2 topic list\n\n# Check if bridge is connected\ndocker-compose logs zenoh-ros2dds-bridge | grep -i \"connect\"\n</code></pre></p> <p>Solution: <pre><code># Restart ROS2 bridge\ndocker-compose restart zenoh-ros2dds-bridge\n\n# Verify ROS2 domain ID matches\ndocker-compose logs ros2-humble | grep ROS_DOMAIN_ID\ndocker-compose logs zenoh-ros2dds-bridge | grep ROS_DOMAIN_ID\n\n# Check namespace configuration\ncat zenoh-ros2dds-bridge/config.json5 | grep namespace\n</code></pre></p>"},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":""},{"location":"troubleshooting/#issue-high-latency","title":"Issue: High Latency","text":"<p>Symptoms: - Messages delayed by seconds - Slow response times</p> <p>Diagnosis: <pre><code># Check CPU usage\ndocker stats\n\n# Check network latency\ndocker exec zenoh-mqtt-bridge ping -c 10 zenoh-router\n\n# Monitor message rates\ndocker-compose logs zenoh-router | grep -i \"message\\|pub\\|sub\" | tail -n 50\n</code></pre></p> <p>Solution: <pre><code># Reduce logging level\n# Edit docker-compose.yaml:\nenvironment:\n  - RUST_LOG=info  # Change from debug to info\n\n# Restart services\ndocker-compose restart\n\n# Check system resources\nfree -h\ndf -h\n</code></pre></p>"},{"location":"troubleshooting/#issue-high-memory-usage","title":"Issue: High Memory Usage","text":"<p>Symptoms: - Container using excessive memory - System becomes slow</p> <p>Diagnosis: <pre><code># Check memory usage per container\ndocker stats --no-stream\n\n# Check container logs for issues\ndocker-compose logs zenoh-router | grep -i \"memory\\|oom\"\n</code></pre></p> <p>Solution: <pre><code># Restart affected service\ndocker-compose restart zenoh-router\n\n# Add memory limits in docker-compose.yaml:\nservices:\n  zenoh-router:\n    mem_limit: 512m\n    mem_reservation: 256m\n\n# Clear old logs\ndocker-compose down\nrm -rf mosquitto/log/*\ndocker-compose up -d\n</code></pre></p>"},{"location":"troubleshooting/#connection-issues","title":"Connection Issues","text":""},{"location":"troubleshooting/#issue-cant-access-web-interfaces","title":"Issue: Can't Access Web Interfaces","text":"<p>Symptoms: - Node-RED not loading at localhost:1880 - REST APIs not responding</p> <p>Diagnosis: <pre><code># Check if service is running\ndocker ps | grep node-red\n\n# Check port mapping\ndocker port node-red\n\n# Test port accessibility\ncurl http://localhost:1880\ncurl http://localhost:8000\n</code></pre></p> <p>Solution: <pre><code># Restart the service\ndocker-compose restart node-red\n\n# Check firewall\nsudo ufw status\nsudo ufw allow 1880/tcp\n\n# Verify no proxy interfering\ncurl -v http://localhost:1880\n</code></pre></p>"},{"location":"troubleshooting/#issue-external-scripts-cant-connect","title":"Issue: External Scripts Can't Connect","text":"<p>Symptoms: - pub.py or sub.py fail to connect - Connection timeout errors</p> <p>Diagnosis: <pre><code># Test Zenoh router accessibility\nnc -zv localhost 7447\n\n# Check if router is listening\ndocker exec zenoh-router netstat -tuln | grep 7447\n\n# Verify firewall\nsudo iptables -L | grep 7447\n</code></pre></p> <p>Solution: <pre><code># Ensure router is exposing port\ndocker-compose ps zenoh-router\n\n# Check docker-compose.yaml port mapping:\nports:\n  - \"7447:7447\"  # Must be present\n\n# Restart router\ndocker-compose restart zenoh-router\n\n# Test connection\ntelnet localhost 7447\n</code></pre></p>"},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":""},{"location":"troubleshooting/#issue-config-changes-not-applied","title":"Issue: Config Changes Not Applied","text":"<p>Symptoms: - Modified configuration has no effect - Service using old settings</p> <p>Solution: <pre><code># Restart the specific service\ndocker-compose restart zenoh-mqtt-bridge\n\n# If config is in volume, rebuild\ndocker-compose down\ndocker-compose up -d\n\n# For major changes, rebuild image\ndocker-compose build zenoh-ros2dds-bridge\ndocker-compose up -d\n</code></pre></p>"},{"location":"troubleshooting/#issue-invalid-configuration","title":"Issue: Invalid Configuration","text":"<p>Symptoms: <pre><code>Error: Failed to parse config file\n</code></pre></p> <p>Solution: <pre><code># Validate JSON5 syntax\ncat zenoh-mqtt-bridge/config.json5\n\n# Common issues:\n# - Missing commas\n# - Trailing commas\n# - Incorrect quotes\n# - Unescaped special characters\n\n# Use online JSON5 validator or:\npython3 -c \"import json5; json5.load(open('zenoh-mqtt-bridge/config.json5'))\"\n</code></pre></p>"},{"location":"troubleshooting/#data-issues","title":"Data Issues","text":""},{"location":"troubleshooting/#issue-malformed-messages","title":"Issue: Malformed Messages","text":"<p>Symptoms: - Subscribers receive garbled data - JSON parsing errors</p> <p>Diagnosis: <pre><code># Monitor raw messages\ndocker-compose logs -f zenoh-subscriber\n\n# Check publisher format\nmosquitto_pub -h localhost -p 1884 -t 'test' -m '{\"test\":123}' -d\n</code></pre></p> <p>Solution: - Ensure valid JSON format - Check character encoding (UTF-8) - Verify message size limits - Test with simple messages first</p>"},{"location":"troubleshooting/#ros2-specific-issues","title":"ROS2-Specific Issues","text":""},{"location":"troubleshooting/#issue-ros2-topics-not-visible","title":"Issue: ROS2 Topics Not Visible","text":"<p>Diagnosis: <pre><code># Enter ROS2 container\ndocker exec -it ros2-humble bash\n\n# Source ROS2\nsource /opt/ros/humble/setup.bash\n\n# List topics\nros2 topic list\n\n# Check if bridge is running\nps aux | grep zenoh\n</code></pre></p> <p>Solution: <pre><code># Verify ROS_DOMAIN_ID\necho $ROS_DOMAIN_ID\n\n# Check DDS configuration\ncat /root/cyclonedds.xml\n\n# Restart ROS2 services\ndocker-compose restart ros2-humble zenoh-ros2dds-bridge\n</code></pre></p>"},{"location":"troubleshooting/#issue-foxglove-not-connecting","title":"Issue: Foxglove Not Connecting","text":"<p>Symptoms: - Can't connect to ws://localhost:8765 - Blank dashboard</p> <p>Solution: <pre><code># Check if Foxglove bridge is running\ndocker exec ros2-humble ps aux | grep foxglove\n\n# View Foxglove logs\ndocker-compose logs ros2-humble | grep foxglove\n\n# Restart ROS2 with Foxglove\ndocker-compose restart ros2-humble\n\n# Test WebSocket\nwscat -c ws://localhost:8765\n</code></pre></p>"},{"location":"troubleshooting/#debugging-tools","title":"Debugging Tools","text":""},{"location":"troubleshooting/#enable-debug-logging","title":"Enable Debug Logging","text":"<pre><code># In docker-compose.yaml\nenvironment:\n  - RUST_LOG=debug  # or trace for maximum verbosity\n</code></pre>"},{"location":"troubleshooting/#interactive-shell-access","title":"Interactive Shell Access","text":"<pre><code># Access any container\ndocker exec -it zenoh-router sh\ndocker exec -it ros2-humble bash\ndocker exec -it zenoh-mqtt-bridge sh\n\n# Install debugging tools (if needed)\napk add curl netcat-openbsd  # Alpine Linux\napt-get update &amp;&amp; apt-get install curl netcat  # Debian/Ubuntu\n</code></pre>"},{"location":"troubleshooting/#network-debugging","title":"Network Debugging","text":"<pre><code># Capture network traffic\ndocker exec zenoh-mqtt-bridge tcpdump -i any port 1884\n\n# Test DNS resolution\ndocker exec zenoh-mqtt-bridge nslookup zenoh-router\n\n# Check routing\ndocker exec zenoh-mqtt-bridge traceroute zenoh-router\n</code></pre>"},{"location":"troubleshooting/#getting-help","title":"Getting Help","text":"<p>If you can't resolve the issue:</p> <ol> <li> <p>Collect Information: <pre><code># System info\ndocker version\ndocker-compose version\nuname -a\n\n# Service logs\ndocker-compose logs &gt; logs.txt\n\n# Configuration\ncat docker-compose.yaml\ncat zenoh-mqtt-bridge/config.json5\ncat zenoh-ros2dds-bridge/config.json5\n</code></pre></p> </li> <li> <p>Search Existing Issues:</p> </li> <li>Project Issues</li> <li>Zenoh Issues</li> <li> <p>ROS2 Answers</p> </li> <li> <p>Create New Issue:</p> </li> <li>Include system information</li> <li>Attach relevant logs</li> <li>Describe steps to reproduce</li> <li>Mention what you've tried</li> </ol>"},{"location":"troubleshooting/#preventive-maintenance","title":"Preventive Maintenance","text":""},{"location":"troubleshooting/#regular-checks","title":"Regular Checks","text":"<pre><code># Weekly: Check disk space\ndf -h\n\n# Monthly: Update images\ndocker-compose pull\ndocker-compose up -d\n\n# Clean old containers/images\ndocker system prune -a\n</code></pre>"},{"location":"troubleshooting/#monitoring","title":"Monitoring","text":"<pre><code># Set up monitoring\ndocker stats\n\n# Log rotation\n# Configure in mosquitto.conf and Docker logging\n</code></pre>"},{"location":"troubleshooting/#see-also","title":"See Also","text":"<ul> <li>Installation Guide</li> <li>Configuration Guide</li> <li>Architecture Overview</li> </ul>"},{"location":"api/endpoints/","title":"API Endpoints","text":"<p>This page provides a comprehensive reference for all REST API endpoints available in the Zenoh Multi-Protocol Bridge system.</p>"},{"location":"api/endpoints/#overview","title":"Overview","text":"<p>The system exposes multiple REST APIs for monitoring, management, and interaction:</p> Service Port Base URL Purpose Zenoh Router 8000 http://localhost:8000 Router status and operations MQTT Bridge 8001 http://localhost:8001 Bridge monitoring and config ROS2 Bridge 8002 http://localhost:8002 ROS2 bridge management"},{"location":"api/endpoints/#zenoh-router-api","title":"Zenoh Router API","text":""},{"location":"api/endpoints/#base-url","title":"Base URL","text":"<pre><code>http://localhost:8000\n</code></pre>"},{"location":"api/endpoints/#get-router-status","title":"Get Router Status","text":"<p>Endpoint: <code>GET /@/router/local</code></p> <p>Description: Retrieve information about the local Zenoh router.</p> <p>Example: <pre><code>curl http://localhost:8000/@/router/local\n</code></pre></p> <p>Response: <pre><code>{\n  \"zid\": \"...\",\n  \"links\": [...],\n  \"locators\": [...]\n}\n</code></pre></p>"},{"location":"api/endpoints/#publish-data","title":"Publish Data","text":"<p>Endpoint: <code>PUT /&lt;key&gt;</code></p> <p>Description: Publish data to a Zenoh key.</p> <p>Example: <pre><code>curl -X PUT http://localhost:8000/demo/sensor/temp \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"temperature\": 25.5, \"unit\": \"celsius\"}'\n</code></pre></p>"},{"location":"api/endpoints/#query-data","title":"Query Data","text":"<p>Endpoint: <code>GET /&lt;key-expression&gt;</code></p> <p>Description: Query data matching a key expression.</p> <p>Example: <pre><code># Query specific key\ncurl http://localhost:8000/demo/sensor/temp\n\n# Query with wildcard\ncurl http://localhost:8000/demo/sensor/*\n</code></pre></p>"},{"location":"api/endpoints/#subscribe-via-sse","title":"Subscribe via SSE","text":"<p>Endpoint: <code>GET /&lt;key-expression&gt;</code></p> <p>Headers: <code>Accept: text/event-stream</code></p> <p>Description: Subscribe to updates using Server-Sent Events.</p> <p>Example: <pre><code>curl http://localhost:8000/demo/sensor/* \\\n  -H 'Accept: text/event-stream'\n</code></pre></p>"},{"location":"api/endpoints/#mqtt-bridge-api","title":"MQTT Bridge API","text":""},{"location":"api/endpoints/#base-url_1","title":"Base URL","text":"<pre><code>http://localhost:8001\n</code></pre>"},{"location":"api/endpoints/#get-bridge-status","title":"Get Bridge Status","text":"<p>Endpoint: <code>GET /@/local/status</code></p> <p>Description: Get the current status of the MQTT bridge.</p> <p>Example: <pre><code>curl http://localhost:8001/@/local/status\n</code></pre></p>"},{"location":"api/endpoints/#list-subscriptions","title":"List Subscriptions","text":"<p>Endpoint: <code>GET /@/local/subscriptions</code></p> <p>Description: List active MQTT subscriptions.</p> <p>Example: <pre><code>curl http://localhost:8001/@/local/subscriptions\n</code></pre></p>"},{"location":"api/endpoints/#get-configuration","title":"Get Configuration","text":"<p>Endpoint: <code>GET /@/local/config</code></p> <p>Description: Retrieve the current bridge configuration.</p> <p>Example: <pre><code>curl http://localhost:8001/@/local/config\n</code></pre></p>"},{"location":"api/endpoints/#ros2-bridge-api","title":"ROS2 Bridge API","text":""},{"location":"api/endpoints/#base-url_2","title":"Base URL","text":"<pre><code>http://localhost:8002\n</code></pre>"},{"location":"api/endpoints/#get-bridge-status_1","title":"Get Bridge Status","text":"<p>Endpoint: <code>GET /@/local/status</code></p> <p>Description: Get the current status of the ROS2 bridge.</p> <p>Example: <pre><code>curl http://localhost:8002/@/local/status\n</code></pre></p>"},{"location":"api/endpoints/#list-active-topics","title":"List Active Topics","text":"<p>Endpoint: <code>GET /@/local/topics</code></p> <p>Description: List ROS2 topics being bridged.</p> <p>Example: <pre><code>curl http://localhost:8002/@/local/topics\n</code></pre></p>"},{"location":"api/endpoints/#get-configuration_1","title":"Get Configuration","text":"<p>Endpoint: <code>GET /@/local/config</code></p> <p>Description: Retrieve the current ROS2 bridge configuration.</p> <p>Example: <pre><code>curl http://localhost:8002/@/local/config\n</code></pre></p>"},{"location":"api/endpoints/#common-patterns","title":"Common Patterns","text":""},{"location":"api/endpoints/#health-check","title":"Health Check","text":"<p>Check if services are responsive:</p> <pre><code># Check all services\ncurl http://localhost:8000/@/router/local\ncurl http://localhost:8001/@/local/status\ncurl http://localhost:8002/@/local/status\n</code></pre>"},{"location":"api/endpoints/#publish-subscribe-pattern","title":"Publish-Subscribe Pattern","text":"<pre><code># Terminal 1: Subscribe\ncurl http://localhost:8000/test/* \\\n  -H 'Accept: text/event-stream'\n\n# Terminal 2: Publish\ncurl -X PUT http://localhost:8000/test/message \\\n  -d 'Hello World'\n</code></pre>"},{"location":"api/endpoints/#query-pattern","title":"Query Pattern","text":"<pre><code># Store data\ncurl -X PUT http://localhost:8000/data/sensor1 -d '{\"temp\": 22}'\ncurl -X PUT http://localhost:8000/data/sensor2 -d '{\"temp\": 24}'\n\n# Query all sensors\ncurl http://localhost:8000/data/*\n</code></pre>"},{"location":"api/endpoints/#error-handling","title":"Error Handling","text":""},{"location":"api/endpoints/#common-http-status-codes","title":"Common HTTP Status Codes","text":"Code Meaning Action 200 Success Request completed successfully 404 Not Found Key or endpoint doesn't exist 500 Server Error Check service logs 503 Service Unavailable Service is starting or down"},{"location":"api/endpoints/#error-response-format","title":"Error Response Format","text":"<pre><code>{\n  \"error\": \"Error description\",\n  \"code\": \"ERROR_CODE\"\n}\n</code></pre>"},{"location":"api/endpoints/#authentication","title":"Authentication","text":"<p>Currently, the REST APIs do not require authentication. For production deployments:</p> <ol> <li>Use a reverse proxy (nginx, traefik)</li> <li>Implement authentication at the proxy level</li> <li>Restrict network access to trusted clients</li> <li>Consider TLS/SSL for encryption</li> </ol>"},{"location":"api/endpoints/#rate-limiting","title":"Rate Limiting","text":"<p>No rate limiting is implemented by default. Consider implementing rate limiting at the proxy level for production use.</p>"},{"location":"api/endpoints/#examples","title":"Examples","text":""},{"location":"api/endpoints/#monitor-sensor-data","title":"Monitor Sensor Data","text":"<pre><code>#!/bin/bash\n# monitor-sensors.sh\n\nwhile true; do\n  echo \"=== Sensor Status ===\"\n  curl -s http://localhost:8000/mqtt/demo/sensor/* | jq '.'\n  sleep 5\ndone\n</code></pre>"},{"location":"api/endpoints/#publish-periodic-updates","title":"Publish Periodic Updates","text":"<pre><code>#!/bin/bash\n# publish-data.sh\n\nwhile true; do\n  TEMP=$((20 + RANDOM % 10))\n  curl -X PUT http://localhost:8000/demo/temperature \\\n    -H 'Content-Type: application/json' \\\n    -d \"{\\\"value\\\": $TEMP, \\\"timestamp\\\": \\\"$(date -Iseconds)\\\"}\"\n  echo \"Published: $TEMP\"\n  sleep 1\ndone\n</code></pre>"},{"location":"api/endpoints/#see-also","title":"See Also","text":"<ul> <li>REST APIs Documentation</li> <li>Testing Guide</li> <li>Troubleshooting</li> </ul>"},{"location":"api/rest-apis/","title":"REST APIs","text":"<p>Detailed documentation for the REST APIs provided by each component of the Zenoh Multi-Protocol Bridge.</p>"},{"location":"api/rest-apis/#api-overview","title":"API Overview","text":"<p>Each major component exposes a REST API for monitoring and management:</p> <ul> <li>Zenoh Router: Core routing operations and monitoring</li> <li>MQTT Bridge: Bridge status and MQTT-specific operations</li> <li>ROS2 Bridge: ROS2 integration status and topic management</li> </ul>"},{"location":"api/rest-apis/#authentication-security","title":"Authentication &amp; Security","text":"<p>Production Security</p> <p>The default configuration does not include authentication. For production deployments:</p> <ul> <li>Use a reverse proxy with authentication (nginx, traefik)</li> <li>Implement TLS/SSL encryption</li> <li>Restrict network access using firewalls</li> <li>Consider API key or OAuth2 authentication</li> </ul>"},{"location":"api/rest-apis/#content-types","title":"Content Types","text":"<p>All APIs support the following content types:</p> <ul> <li>Request: <code>application/json</code>, <code>text/plain</code></li> <li>Response: <code>application/json</code>, <code>text/event-stream</code> (for subscriptions)</li> </ul>"},{"location":"api/rest-apis/#see-also","title":"See Also","text":"<ul> <li>API Endpoints - Complete endpoint reference</li> <li>Usage Examples - Practical API usage examples</li> </ul>"},{"location":"architecture/components/","title":"System Components","text":"<p>Detailed information about each component in the Zenoh Multi-Protocol Bridge system.</p> <p>For specific component documentation, see:</p> <ul> <li>Zenoh Router</li> <li>MQTT Broker</li> <li>Zenoh-MQTT Bridge</li> <li>ROS2 Humble</li> <li>Zenoh-ROS2DDS Bridge</li> <li>Node-RED</li> </ul>"},{"location":"architecture/data-flow/","title":"Data Flow","text":"<p>Understanding how data flows through the Zenoh Multi-Protocol Bridge system.</p>"},{"location":"architecture/data-flow/#multi-protocol-flow","title":"Multi-Protocol Flow","text":"<p>Data flows seamlessly between MQTT, Zenoh, and ROS2:</p> <pre><code>sequenceDiagram\n    participant MQTT as MQTT Publisher\n    participant Bridge as MQTT Bridge\n    participant Router as Zenoh Router\n    participant ROS2Bridge as ROS2 Bridge\n    participant ROS2 as ROS2 Node\n\n    MQTT-&gt;&gt;Bridge: MQTT Publish\n    Bridge-&gt;&gt;Router: Zenoh Put\n    Router-&gt;&gt;ROS2Bridge: Zenoh Sample\n    ROS2Bridge-&gt;&gt;ROS2: ROS2 Publish</code></pre> <p>See the Architecture Overview for more details.</p>"},{"location":"architecture/network/","title":"Network Architecture","text":"<p>The network topology and configuration of the Zenoh Multi-Protocol Bridge.</p>"},{"location":"architecture/network/#docker-network","title":"Docker Network","text":"<p>All services run in a dedicated Docker bridge network: <code>zenoh-mqtt-net</code></p>"},{"location":"architecture/network/#port-mappings","title":"Port Mappings","text":"<p>See the Architecture Overview for complete port information.</p>"},{"location":"architecture/overview/","title":"Architecture Overview","text":"<p>The Zenoh Multi-Protocol Bridge is designed with a microservices architecture, where each component is containerized and communicates over well-defined protocols.</p>"},{"location":"architecture/overview/#system-architecture","title":"System Architecture","text":"<p>The system follows a hub-and-spoke architecture with the Zenoh Router at its core, enabling seamless communication between different protocol domains.</p> <pre><code>graph TB\n    subgraph \"Docker Environment\"\n        subgraph \"MQTT Domain\"\n            MQTTPub[MQTT Publisher&lt;br/&gt;Auto Data Generator]\n            MQTTSub[MQTT Subscriber]\n            Mosquitto[Mosquitto Broker&lt;br/&gt;:1883, :9001]\n        end\n\n        subgraph \"Zenoh Core\"\n            ZenohRouter[Zenoh Router&lt;br/&gt;:7447, :8000&lt;br/&gt;Central Hub]\n        end\n\n        subgraph \"Bridge Layer\"\n            MQTTBridge[Zenoh-MQTT Bridge&lt;br/&gt;:8001, :1884&lt;br/&gt;Protocol Translation]\n            ROSBridge[Zenoh-ROS2DDS Bridge&lt;br/&gt;:8002, :7449&lt;br/&gt;Protocol Translation]\n        end\n\n        subgraph \"ROS2 Domain\"\n            ROS2[ROS2 Humble&lt;br/&gt;:8765&lt;br/&gt;Foxglove Bridge]\n            ROS2Pub[ROS2 Publisher&lt;br/&gt;/chatter topic]\n        end\n\n        subgraph \"Zenoh Clients\"\n            ZenohSub[Zenoh Subscriber&lt;br/&gt;Python Application]\n        end\n\n        subgraph \"Management\"\n            NodeRED[Node-RED&lt;br/&gt;:1880&lt;br/&gt;Monitoring &amp; Control]\n        end\n    end\n\n    subgraph \"External\"\n        ExternalPub[pub.py&lt;br/&gt;Host Zenoh Publisher]\n        ExternalSub[sub.py&lt;br/&gt;Host Zenoh Subscriber]\n        WebBrowser[Web Browser&lt;br/&gt;User Interface]\n    end\n\n    %% Connections\n    MQTTPub --&gt;|MQTT Publish| MQTTBridge\n    MQTTBridge &lt;--&gt;|MQTT| Mosquitto\n    MQTTBridge &lt;--&gt;|Zenoh Protocol| ZenohRouter\n\n    Mosquitto &lt;--&gt;|MQTT Subscribe| MQTTSub\n    Mosquitto &lt;--&gt;|MQTT| NodeRED\n\n    ZenohRouter &lt;--&gt;|Zenoh Subscribe| ZenohSub\n    ZenohRouter &lt;--&gt;|Zenoh Protocol| ROSBridge\n\n    ROSBridge &lt;--&gt;|DDS Communication| ROS2\n    ROS2Pub --&gt;|ROS2 Topic| ROS2\n\n    NodeRED -.-&gt;|Monitor| MQTTBridge\n    NodeRED -.-&gt;|Monitor| ROS2\n\n    ExternalPub &lt;--&gt;|TCP:7447| ZenohRouter\n    ExternalSub &lt;--&gt;|TCP:7447| ZenohRouter\n\n    WebBrowser --&gt;|HTTP| NodeRED\n    WebBrowser --&gt;|WebSocket| ROS2\n\n    classDef mqtt fill:#e1f5fe\n    classDef zenoh fill:#f3e5f5\n    classDef bridge fill:#fff3e0\n    classDef ros fill:#e8f5e8\n    classDef mgmt fill:#fce4ec\n\n    class Mosquitto,MQTTPub,MQTTSub mqtt\n    class ZenohRouter,ZenohSub zenoh\n    class MQTTBridge,ROSBridge bridge\n    class ROS2,ROS2Pub ros\n    class NodeRED mgmt</code></pre>"},{"location":"architecture/overview/#design-principles","title":"Design Principles","text":""},{"location":"architecture/overview/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"<p>Each component has a single, well-defined responsibility:</p> <ul> <li>Protocol Bridges: Handle translation between protocols</li> <li>Message Brokers: Manage message routing within their protocol domain</li> <li>Core Router: Provides the central Zenoh routing infrastructure</li> <li>Clients: Consume or produce data in specific protocols</li> </ul>"},{"location":"architecture/overview/#2-scalability","title":"2. Scalability","text":"<p>The architecture supports horizontal scaling:</p> <ul> <li>Multiple bridge instances can connect to the same Zenoh router</li> <li>Clients can be added or removed dynamically</li> <li>Load can be distributed across multiple routers</li> </ul>"},{"location":"architecture/overview/#3-loose-coupling","title":"3. Loose Coupling","text":"<p>Components are loosely coupled through:</p> <ul> <li>Standardized protocols (MQTT, Zenoh, DDS)</li> <li>Configuration-driven topic mapping</li> <li>Docker networking for service discovery</li> </ul>"},{"location":"architecture/overview/#4-protocol-agnostic","title":"4. Protocol Agnostic","text":"<p>The system abstracts protocol-specific details:</p> <ul> <li>Applications don't need to know about all protocols</li> <li>New protocols can be added with new bridge services</li> <li>Protocol translation is transparent to clients</li> </ul>"},{"location":"architecture/overview/#key-components","title":"Key Components","text":""},{"location":"architecture/overview/#core-infrastructure","title":"Core Infrastructure","text":""},{"location":"architecture/overview/#zenoh-router","title":"Zenoh Router","text":"<ul> <li>Role: Central message routing hub</li> <li>Technology: Eclipse Zenoh</li> <li>Key Features:</li> <li>High-performance pub/sub</li> <li>Store/Query capabilities</li> <li>REST API for monitoring</li> <li>Zero-copy architecture</li> </ul>"},{"location":"architecture/overview/#docker-network","title":"Docker Network","text":"<ul> <li>Name: <code>zenoh-mqtt-net</code></li> <li>Type: Bridge network</li> <li>Purpose: Container-to-container communication</li> <li>DNS: Automatic service name resolution</li> </ul>"},{"location":"architecture/overview/#protocol-domains","title":"Protocol Domains","text":""},{"location":"architecture/overview/#mqtt-domain","title":"MQTT Domain","text":"<ul> <li>Broker: Eclipse Mosquitto</li> <li>Clients: Publishers and Subscribers</li> <li>Use Cases: IoT devices, sensors, legacy systems</li> </ul>"},{"location":"architecture/overview/#ros2-domain","title":"ROS2 Domain","text":"<ul> <li>Framework: ROS2 Humble</li> <li>Middleware: CycloneDDS</li> <li>Use Cases: Robotics, autonomous systems</li> </ul>"},{"location":"architecture/overview/#zenoh-domain","title":"Zenoh Domain","text":"<ul> <li>Router: Eclipse Zenoh Router</li> <li>Clients: Python subscribers, external scripts</li> <li>Use Cases: Edge computing, distributed systems</li> </ul>"},{"location":"architecture/overview/#bridge-services","title":"Bridge Services","text":""},{"location":"architecture/overview/#zenoh-mqtt-bridge","title":"Zenoh-MQTT Bridge","text":"<ul> <li>Function: Bidirectional MQTT \u2194 Zenoh translation</li> <li>Configuration: JSON5 based</li> <li>Features:</li> <li>Topic filtering</li> <li>Scope-based key mapping</li> <li>Generalised subscriptions</li> </ul>"},{"location":"architecture/overview/#zenoh-ros2dds-bridge","title":"Zenoh-ROS2DDS Bridge","text":"<ul> <li>Function: Bidirectional ROS2 \u2194 Zenoh translation</li> <li>Configuration: JSON5 based</li> <li>Features:</li> <li>Namespace isolation</li> <li>Topic/service/action bridging</li> <li>Selective filtering</li> </ul>"},{"location":"architecture/overview/#management-monitoring","title":"Management &amp; Monitoring","text":""},{"location":"architecture/overview/#node-red","title":"Node-RED","text":"<ul> <li>Purpose: Visual programming and monitoring</li> <li>Capabilities:</li> <li>Flow-based programming</li> <li>Real-time dashboards</li> <li>Protocol integration</li> <li>Rule-based automation</li> </ul>"},{"location":"architecture/overview/#communication-patterns","title":"Communication Patterns","text":""},{"location":"architecture/overview/#pubsub-pattern","title":"Pub/Sub Pattern","text":"<p>The system primarily uses publish-subscribe pattern:</p> <pre><code>sequenceDiagram\n    participant Pub as Publisher\n    participant Router as Zenoh Router\n    participant Sub1 as Subscriber 1\n    participant Sub2 as Subscriber 2\n\n    Sub1-&gt;&gt;Router: Subscribe to \"sensor/*\"\n    Sub2-&gt;&gt;Router: Subscribe to \"sensor/temperature\"\n\n    Pub-&gt;&gt;Router: Publish \"sensor/temperature\" = 25.5\n\n    Router-&gt;&gt;Sub1: Deliver (matches \"sensor/*\")\n    Router-&gt;&gt;Sub2: Deliver (matches \"sensor/temperature\")</code></pre>"},{"location":"architecture/overview/#requestresponse-pattern","title":"Request/Response Pattern","text":"<p>ROS2 services use request/response:</p> <pre><code>sequenceDiagram\n    participant Client as ROS2 Client\n    participant Bridge as ROS2 Bridge\n    participant Router as Zenoh Router\n    participant Service as ROS2 Service\n\n    Client-&gt;&gt;Bridge: Service Request\n    Bridge-&gt;&gt;Router: Zenoh Query\n    Router-&gt;&gt;Bridge: Route to Service\n    Bridge-&gt;&gt;Service: DDS Service Call\n    Service-&gt;&gt;Bridge: Service Response\n    Bridge-&gt;&gt;Router: Zenoh Reply\n    Router-&gt;&gt;Bridge: Route to Client\n    Bridge-&gt;&gt;Client: Service Response</code></pre>"},{"location":"architecture/overview/#data-flow-layers","title":"Data Flow Layers","text":""},{"location":"architecture/overview/#layer-1-data-generation","title":"Layer 1: Data Generation","text":"<ul> <li>MQTT publishers generate sensor data</li> <li>ROS2 nodes publish robot data</li> <li>External scripts publish test data</li> </ul>"},{"location":"architecture/overview/#layer-2-protocol-translation","title":"Layer 2: Protocol Translation","text":"<ul> <li>MQTT Bridge translates MQTT \u2194 Zenoh</li> <li>ROS2 Bridge translates DDS \u2194 Zenoh</li> <li>Bidirectional data flow</li> </ul>"},{"location":"architecture/overview/#layer-3-routing","title":"Layer 3: Routing","text":"<ul> <li>Zenoh Router distributes messages</li> <li>Pattern-based subscription matching</li> <li>Efficient message delivery</li> </ul>"},{"location":"architecture/overview/#layer-4-data-consumption","title":"Layer 4: Data Consumption","text":"<ul> <li>MQTT subscribers receive IoT data</li> <li>ROS2 nodes receive robot commands</li> <li>Zenoh subscribers get unified data stream</li> <li>Node-RED visualizes and processes data</li> </ul>"},{"location":"architecture/overview/#configuration-management","title":"Configuration Management","text":""},{"location":"architecture/overview/#static-configuration","title":"Static Configuration","text":"<ul> <li>Docker Compose orchestration</li> <li>Service configurations (JSON5 files)</li> <li>Network and volume definitions</li> </ul>"},{"location":"architecture/overview/#dynamic-configuration","title":"Dynamic Configuration","text":"<ul> <li>Runtime topic subscriptions</li> <li>Flow modifications in Node-RED</li> <li>Adjustable publish rates</li> </ul>"},{"location":"architecture/overview/#security-considerations","title":"Security Considerations","text":""},{"location":"architecture/overview/#network-isolation","title":"Network Isolation","text":"<ul> <li>Services communicate within Docker network</li> <li>Port mapping controls external access</li> <li>Host access restricted to necessary ports</li> </ul>"},{"location":"architecture/overview/#access-control","title":"Access Control","text":"<ul> <li>Mosquitto ACL configuration</li> <li>Topic filtering in bridges</li> <li>Namespace isolation in ROS2</li> </ul>"},{"location":"architecture/overview/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>TLS/SSL for encrypted communication</li> <li>Authentication tokens</li> <li>Fine-grained access policies</li> </ul>"},{"location":"architecture/overview/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"architecture/overview/#single-host-deployment-current","title":"Single-Host Deployment (Current)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         Docker Host                 \u2502\n\u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u2502\n\u2502  \u2502   zenoh-mqtt-net (bridge)     \u2502  \u2502\n\u2502  \u2502  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2510\u2502  \u2502\n\u2502  \u2502  \u2502MQTT  \u2502  \u2502Zenoh \u2502  \u2502ROS2  \u2502\u2502  \u2502\n\u2502  \u2502  \u2502Domain\u2502  \u2502Core  \u2502  \u2502Domain\u2502\u2502  \u2502\n\u2502  \u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2502  \u2502\n\u2502  \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#multi-host-deployment-future","title":"Multi-Host Deployment (Future)","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502   Host 1     \u2502      \u2502   Host 2     \u2502      \u2502   Host 3     \u2502\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502      \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502      \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u2502\n\u2502 \u2502MQTT      \u2502 \u2502\u25c4\u2500\u2500\u2500\u2500\u25ba\u2502 \u2502Zenoh     \u2502 \u2502\u25c4\u2500\u2500\u2500\u2500\u25ba\u2502 \u2502ROS2      \u2502 \u2502\n\u2502 \u2502Domain    \u2502 \u2502      \u2502 \u2502Router    \u2502 \u2502      \u2502 \u2502Domain    \u2502 \u2502\n\u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502      \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502      \u2502 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518      \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"architecture/overview/#performance-characteristics","title":"Performance Characteristics","text":""},{"location":"architecture/overview/#latency","title":"Latency","text":"<ul> <li>MQTT \u2192 Zenoh: &lt; 10ms (typical)</li> <li>ROS2 \u2192 Zenoh: &lt; 5ms (typical)</li> <li>End-to-End: &lt; 20ms (MQTT \u2192 Zenoh \u2192 ROS2)</li> </ul>"},{"location":"architecture/overview/#throughput","title":"Throughput","text":"<ul> <li>MQTT Bridge: 10K+ messages/second</li> <li>Zenoh Router: 1M+ messages/second</li> <li>ROS2 Bridge: 50K+ messages/second</li> </ul>"},{"location":"architecture/overview/#resource-usage","title":"Resource Usage","text":"<ul> <li>Memory: ~500MB total (all services)</li> <li>CPU: &lt; 5% idle, &lt; 30% under load</li> <li>Network: Minimal latency, high efficiency</li> </ul>"},{"location":"architecture/overview/#next-steps","title":"Next Steps","text":"<ul> <li>System Components - Detailed component descriptions</li> <li>Data Flow - Message flow patterns</li> <li>Network Architecture - Network topology and configuration</li> </ul>"},{"location":"components/mqtt-broker/","title":"MQTT Broker (Mosquitto)","text":"<p>Eclipse Mosquitto MQTT broker configuration and usage.</p>"},{"location":"components/mqtt-broker/#overview","title":"Overview","text":"<p>Mosquitto serves as the MQTT message broker in the system.</p> <p>Ports: 1883 (MQTT), 9001 (WebSocket)</p>"},{"location":"components/node-red/","title":"Node-RED","text":"<p>Visual flow editor and automation platform.</p>"},{"location":"components/node-red/#overview","title":"Overview","text":"<p>Node-RED provides a web-based interface for creating flows and dashboards.</p> <p>Port: 1880</p> <p>Access: http://localhost:1880</p>"},{"location":"components/ros2-humble/","title":"ROS2 Humble","text":"<p>ROS2 Humble robotics framework integration.</p>"},{"location":"components/ros2-humble/#overview","title":"Overview","text":"<p>ROS2 Humble provides the robotics framework with DDS communication.</p> <p>Port: 8765 (Foxglove Bridge)</p>"},{"location":"components/test-components/","title":"Test Components","text":"<p>Various testing components and utilities.</p>"},{"location":"components/test-components/#mqtt-publisher","title":"MQTT Publisher","text":"<p>Automatic sensor data generator.</p>"},{"location":"components/test-components/#mqtt-subscriber","title":"MQTT Subscriber","text":"<p>Client listening to MQTT messages.</p>"},{"location":"components/test-components/#zenoh-subscriber","title":"Zenoh Subscriber","text":"<p>Python application for receiving Zenoh data.</p>"},{"location":"components/zenoh-mqtt-bridge/","title":"Zenoh-MQTT Bridge","text":"<p>The Zenoh-MQTT Bridge provides bidirectional protocol translation between MQTT and Zenoh, enabling IoT devices and applications using MQTT to seamlessly communicate with Zenoh-based systems.</p>"},{"location":"components/zenoh-mqtt-bridge/#overview","title":"Overview","text":"<p>This bridge connects the MQTT and Zenoh worlds, translating messages in both directions while maintaining topic structure and message semantics.</p> <pre><code>graph LR\n    subgraph \"MQTT Domain\"\n        MP[MQTT Publisher] --&gt;|MQTT| MB[MQTT Broker&lt;br/&gt;:1883]\n        MB --&gt;|MQTT| MS[MQTT Subscriber]\n    end\n\n    subgraph \"Bridge\"\n        Bridge[Zenoh-MQTT Bridge&lt;br/&gt;:1884, :8001]\n    end\n\n    subgraph \"Zenoh Domain\"\n        ZR[Zenoh Router&lt;br/&gt;:7447]\n        ZS[Zenoh Subscriber]\n    end\n\n    MP --&gt;|MQTT :1884| Bridge\n    Bridge &lt;--&gt;|MQTT| MB\n    Bridge &lt;--&gt;|Zenoh| ZR\n    ZR --&gt;|Zenoh| ZS\n\n    classDef bridge fill:#fff3e0\n    class Bridge bridge</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#key-features","title":"Key Features","text":""},{"location":"components/zenoh-mqtt-bridge/#1-bidirectional-translation","title":"1. Bidirectional Translation","text":"<ul> <li>MQTT \u2192 Zenoh: MQTT messages are published to Zenoh with scoped keys</li> <li>Zenoh \u2192 MQTT: Zenoh messages are published to MQTT topics</li> </ul>"},{"location":"components/zenoh-mqtt-bridge/#2-topic-mapping","title":"2. Topic Mapping","text":"<ul> <li>Configurable scope prefix (<code>mqtt/demo</code>)</li> <li>Topic filtering with allow/deny patterns</li> <li>Generalised subscriptions for wildcard topics</li> </ul>"},{"location":"components/zenoh-mqtt-bridge/#3-mqtt-server","title":"3. MQTT Server","text":"<p>Acts as an MQTT broker on port 1884: - Clients can connect directly to the bridge - Messages automatically forwarded to Zenoh</p>"},{"location":"components/zenoh-mqtt-bridge/#4-rest-api","title":"4. REST API","text":"<p>Provides monitoring and management via HTTP (port 8001)</p>"},{"location":"components/zenoh-mqtt-bridge/#configuration","title":"Configuration","text":""},{"location":"components/zenoh-mqtt-bridge/#current-configuration","title":"Current Configuration","text":"<p>Located at <code>zenoh-mqtt-bridge/config.json5</code>:</p> <pre><code>{\n  mode: \"client\",\n  connect: {\n    endpoints: [\"tcp/zenoh-router:7447\"],\n  },\n  plugins: {\n    rest: {\n      http_port: 8000,\n    },\n    mqtt: {\n      port: \"0.0.0.0:1884\",\n      scope: \"mqtt/demo\",\n      allow: \".*\",\n      deny: \"^\\\\$SYS/.*|^private/.*\",\n      generalise_subs: [\n        \"sensor/*\",\n        \"device/*\",\n        \"data/*\"\n      ],\n      generalise_pubs: [\n        \"sensor/**\",\n        \"device/**\",\n        \"data/**\"\n      ],\n      tx_channel_size: 65536,\n    }\n  },\n  plugins_loading: {\n    enabled: true\n  }\n}\n</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#configuration-parameters","title":"Configuration Parameters","text":""},{"location":"components/zenoh-mqtt-bridge/#mode","title":"Mode","text":"<p><pre><code>mode: \"client\"\n</code></pre> Bridge connects as a client to the Zenoh router.</p>"},{"location":"components/zenoh-mqtt-bridge/#zenoh-connection","title":"Zenoh Connection","text":"<p><pre><code>connect: {\n  endpoints: [\"tcp/zenoh-router:7447\"]\n}\n</code></pre> Specifies the Zenoh router endpoint.</p>"},{"location":"components/zenoh-mqtt-bridge/#mqtt-plugin-settings","title":"MQTT Plugin Settings","text":"<p>Port <pre><code>port: \"0.0.0.0:1884\"\n</code></pre> The bridge listens for MQTT connections on port 1884.</p> <p>Scope <pre><code>scope: \"mqtt/demo\"\n</code></pre> All MQTT topics are prefixed with this scope in Zenoh. For example: - MQTT topic: <code>sensor/temperature</code> - Zenoh key: <code>mqtt/demo/sensor/temperature</code></p> <p>Allow/Deny Filters <pre><code>allow: \".*\"\ndeny: \"^\\\\$SYS/.*|^private/.*\"\n</code></pre> - <code>allow</code>: Accept all topics by default - <code>deny</code>: Reject system topics (<code>$SYS/*</code>) and private topics</p> <p>Generalised Subscriptions <pre><code>generalise_subs: [\"sensor/*\", \"device/*\", \"data/*\"]\ngeneralise_pubs: [\"sensor/**\", \"device/**\", \"data/**\"]\n</code></pre> Optimizes subscription handling for wildcard topics.</p> <p>Buffer Size <pre><code>tx_channel_size: 65536\n</code></pre> Transmission buffer size for high-throughput scenarios.</p>"},{"location":"components/zenoh-mqtt-bridge/#usage-examples","title":"Usage Examples","text":""},{"location":"components/zenoh-mqtt-bridge/#publishing-mqtt-messages","title":"Publishing MQTT Messages","text":""},{"location":"components/zenoh-mqtt-bridge/#direct-to-bridge","title":"Direct to Bridge","text":"<pre><code># Publish to bridge (port 1884)\nmosquitto_pub -h localhost -p 1884 \\\n  -t 'sensor/temperature' \\\n  -m '{\"temp\":25.5,\"humidity\":60}'\n</code></pre> <p>This message will appear in Zenoh as: <code>mqtt/demo/sensor/temperature</code></p>"},{"location":"components/zenoh-mqtt-bridge/#via-mqtt-broker","title":"Via MQTT Broker","text":"<pre><code># Publish to Mosquitto (port 1883)\nmosquitto_pub -h localhost -p 1883 \\\n  -t 'sensor/temperature' \\\n  -m '{\"temp\":25.5,\"humidity\":60}'\n</code></pre> <p>The bridge subscribes to the broker and forwards to Zenoh.</p>"},{"location":"components/zenoh-mqtt-bridge/#subscribing-to-mqtt-messages","title":"Subscribing to MQTT Messages","text":"<pre><code># Subscribe via bridge\nmosquitto_sub -h localhost -p 1884 -t 'sensor/#' -v\n\n# Subscribe via broker\nmosquitto_sub -h localhost -p 1883 -t 'sensor/#' -v\n</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#zenoh-to-mqtt-flow","title":"Zenoh to MQTT Flow","text":"<p>Messages published to Zenoh keys matching the scope appear in MQTT:</p> <pre><code># Python Zenoh publisher\nimport zenoh\n\nsession = zenoh.open()\nsession.put(\"mqtt/demo/sensor/status\", \"online\")\n</code></pre> <p>MQTT subscribers see this on topic: <code>sensor/status</code></p>"},{"location":"components/zenoh-mqtt-bridge/#docker-configuration","title":"Docker Configuration","text":"<pre><code>zenoh-mqtt-bridge:\n  container_name: zenoh-mqtt-bridge\n  image: eclipse/zenoh-bridge-mqtt:latest\n  restart: unless-stopped\n  depends_on:\n    - mosquitto\n    - zenoh-router\n  ports:\n    - \"8001:8000\"  # REST API\n    - \"1884:1884\"  # MQTT port\n  volumes:\n    - ./zenoh-mqtt-bridge/config.json5:/etc/zenoh/config.json5\n  environment:\n    - RUST_LOG=debug\n  networks:\n    - zenoh-mqtt-net\n  command: \"-c /etc/zenoh/config.json5\"\n</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#port-mappings","title":"Port Mappings","text":"Container Port Host Port Protocol Purpose 8000 8001 HTTP REST API 1884 1884 MQTT MQTT server"},{"location":"components/zenoh-mqtt-bridge/#monitoring","title":"Monitoring","text":""},{"location":"components/zenoh-mqtt-bridge/#view-logs","title":"View Logs","text":"<pre><code># Real-time logs\ndocker-compose logs -f zenoh-mqtt-bridge\n\n# Filter for errors\ndocker-compose logs zenoh-mqtt-bridge | grep -i error\n</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#rest-api","title":"REST API","text":"<p>Check bridge status:</p> <pre><code># Bridge information\ncurl http://localhost:8001/@/local/status\n\n# List active subscriptions\ncurl http://localhost:8001/@/local/subscriptions\n</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#test-connectivity","title":"Test Connectivity","text":"<pre><code># Test MQTT connection\nmosquitto_pub -h localhost -p 1884 -t 'test' -m 'hello' -d\n\n# Test from Zenoh side\npython3 sub.py\n</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#topic-mapping-examples","title":"Topic Mapping Examples","text":""},{"location":"components/zenoh-mqtt-bridge/#example-1-simple-topic","title":"Example 1: Simple Topic","text":"MQTT Topic Zenoh Key <code>sensor/temperature</code> <code>mqtt/demo/sensor/temperature</code> <code>device/status</code> <code>mqtt/demo/device/status</code> <code>data/metrics</code> <code>mqtt/demo/data/metrics</code>"},{"location":"components/zenoh-mqtt-bridge/#example-2-hierarchical-topics","title":"Example 2: Hierarchical Topics","text":"MQTT Topic Zenoh Key <code>home/living/temp</code> <code>mqtt/demo/home/living/temp</code> <code>factory/line1/sensor3</code> <code>mqtt/demo/factory/line1/sensor3</code>"},{"location":"components/zenoh-mqtt-bridge/#example-3-wildcards","title":"Example 3: Wildcards","text":"<p>MQTT subscriptions with wildcards work seamlessly:</p> <pre><code># Subscribe to all sensor topics\nmosquitto_sub -h localhost -p 1884 -t 'sensor/#'\n</code></pre> <p>Receives all Zenoh messages under <code>mqtt/demo/sensor/*</code></p>"},{"location":"components/zenoh-mqtt-bridge/#performance","title":"Performance","text":""},{"location":"components/zenoh-mqtt-bridge/#throughput","title":"Throughput","text":"<ul> <li>10,000+ messages/second typical</li> <li>100,000+ messages/second with tuning</li> </ul>"},{"location":"components/zenoh-mqtt-bridge/#latency","title":"Latency","text":"<ul> <li>&lt; 1ms local bridge latency</li> <li>&lt; 5ms end-to-end (MQTT \u2192 Zenoh)</li> </ul>"},{"location":"components/zenoh-mqtt-bridge/#resource-usage","title":"Resource Usage","text":"<ul> <li>Memory: ~50 MB base</li> <li>CPU: &lt; 2% idle, scales with message rate</li> </ul>"},{"location":"components/zenoh-mqtt-bridge/#troubleshooting","title":"Troubleshooting","text":""},{"location":"components/zenoh-mqtt-bridge/#bridge-not-starting","title":"Bridge Not Starting","text":"<pre><code># Check logs for errors\ndocker-compose logs zenoh-mqtt-bridge\n\n# Verify Zenoh router is accessible\ndocker exec zenoh-mqtt-bridge ping -c 2 zenoh-router\n\n# Test Zenoh connection\ndocker exec zenoh-mqtt-bridge nc -zv zenoh-router 7447\n</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#messages-not-forwarding","title":"Messages Not Forwarding","text":"<pre><code># Check if bridge receives MQTT messages\ndocker-compose logs zenoh-mqtt-bridge | grep -i \"received\\|publish\"\n\n# Verify topic matches allow/deny filters\n# Check configuration: cat zenoh-mqtt-bridge/config.json5\n\n# Test direct connection\nmosquitto_pub -h localhost -p 1884 -t 'test' -m 'hello' -d\n</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#high-latency","title":"High Latency","text":"<pre><code># Check buffer sizes in configuration\n# Verify network connectivity\ndocker exec zenoh-mqtt-bridge ping -c 5 zenoh-router\n\n# Monitor resource usage\ndocker stats zenoh-mqtt-bridge\n</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"components/zenoh-mqtt-bridge/#custom-topic-mapping","title":"Custom Topic Mapping","text":"<p>Modify the scope for different key namespaces:</p> <pre><code>{\n  plugins: {\n    mqtt: {\n      scope: \"iot/sensors\",  // Custom scope\n      // MQTT 'temp' becomes 'iot/sensors/temp' in Zenoh\n    }\n  }\n}\n</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#multiple-bridges","title":"Multiple Bridges","text":"<p>Run multiple bridge instances with different scopes:</p> <pre><code>zenoh-mqtt-bridge-1:\n  volumes:\n    - ./bridge1-config.json5:/etc/zenoh/config.json5\n  ports:\n    - \"1884:1884\"\n\nzenoh-mqtt-bridge-2:\n  volumes:\n    - ./bridge2-config.json5:/etc/zenoh/config.json5\n  ports:\n    - \"1885:1884\"\n</code></pre>"},{"location":"components/zenoh-mqtt-bridge/#qos-mapping","title":"QoS Mapping","text":"<p>MQTT QoS levels are handled: - QoS 0: Fire and forget (Zenoh default) - QoS 1: At least once (Zenoh with reliability) - QoS 2: Exactly once (Not fully supported)</p>"},{"location":"components/zenoh-mqtt-bridge/#best-practices","title":"Best Practices","text":"<ol> <li>Use Meaningful Scopes: Choose scopes that reflect your data organization</li> <li>Filter Topics: Use allow/deny to reduce unnecessary traffic</li> <li>Monitor Logs: Check for dropped messages or errors</li> <li>Test Bidirectionally: Verify both MQTT\u2192Zenoh and Zenoh\u2192MQTT</li> <li>Tune Buffer Sizes: Adjust <code>tx_channel_size</code> for your throughput needs</li> </ol>"},{"location":"components/zenoh-mqtt-bridge/#security-considerations","title":"Security Considerations","text":"<ul> <li>Bridge has no authentication by default</li> <li>Consider using MQTT authentication on broker</li> <li>Use network isolation (Docker networks)</li> <li>For production, implement TLS/SSL</li> </ul>"},{"location":"components/zenoh-mqtt-bridge/#see-also","title":"See Also","text":"<ul> <li>MQTT Broker</li> <li>Zenoh Router</li> <li>Configuration Guide</li> <li>Eclipse Zenoh MQTT Bridge</li> </ul>"},{"location":"components/zenoh-ros2dds-bridge/","title":"Zenoh-ROS2DDS Bridge","text":"<p>Protocol bridge between ROS2 DDS and Zenoh.</p>"},{"location":"components/zenoh-ros2dds-bridge/#overview","title":"Overview","text":"<p>This bridge enables bidirectional communication between ROS2 and Zenoh.</p> <p>Ports: 8002 (REST API), 7449 (Zenoh)</p>"},{"location":"components/zenoh-router/","title":"Zenoh Router","text":"<p>The Zenoh Router is the central component of the Zenoh Multi-Protocol Bridge system, providing high-performance message routing and distribution across the network.</p>"},{"location":"components/zenoh-router/#overview","title":"Overview","text":"<p>The Zenoh Router acts as the backbone of the system, connecting all protocol bridges and clients. It implements the Zenoh protocol, which is designed for:</p> <ul> <li>Zero-overhead networking: Minimal latency and CPU usage</li> <li>Pub/Sub messaging: Topic-based message distribution</li> <li>Store/Query operations: Optional data storage and retrieval</li> <li>Multi-protocol support: REST, TCP, UDP, and WebSocket</li> </ul>"},{"location":"components/zenoh-router/#architecture-role","title":"Architecture Role","text":"<pre><code>graph TB\n    subgraph \"System Architecture\"\n        MB[MQTT Bridge] --&gt;|Zenoh Protocol| ZR[Zenoh Router&lt;br/&gt;Central Hub]\n        RB[ROS2 Bridge] --&gt;|Zenoh Protocol| ZR\n        ZS[Zenoh Subscriber] --&gt;|Zenoh Protocol| ZR\n        EP[External Publisher] --&gt;|TCP :7447| ZR\n        ES[External Subscriber] --&gt;|TCP :7447| ZR\n        ZR --&gt;|REST API :8000| Monitor[Monitoring Tools]\n    end\n\n    classDef central fill:#f3e5f5\n    class ZR central</code></pre>"},{"location":"components/zenoh-router/#key-features","title":"Key Features","text":""},{"location":"components/zenoh-router/#1-message-routing","title":"1. Message Routing","text":"<p>The router efficiently routes messages based on:</p> <ul> <li>Topic patterns: Wildcard-based matching (<code>sensor/*</code>, <code>robot/+/status</code>)</li> <li>Key expressions: Flexible path-like identifiers</li> <li>Subscriptions: Dynamic subscription management</li> </ul>"},{"location":"components/zenoh-router/#2-rest-api","title":"2. REST API","text":"<p>The router exposes a REST API on port 8000 for:</p> <ul> <li>Monitoring router status</li> <li>Querying stored data</li> <li>Publishing messages via HTTP</li> <li>Managing subscriptions</li> </ul>"},{"location":"components/zenoh-router/#3-multiple-transports","title":"3. Multiple Transports","text":"<p>Supports various transport protocols:</p> <ul> <li>TCP: Default transport (port 7447)</li> <li>UDP: For discovery and multicast</li> <li>WebSocket: For browser-based clients</li> <li>REST: For HTTP-based interaction</li> </ul>"},{"location":"components/zenoh-router/#4-storequery","title":"4. Store/Query","text":"<p>Optional storage backend for:</p> <ul> <li>Historical data retrieval</li> <li>Query operations</li> <li>Data persistence</li> </ul>"},{"location":"components/zenoh-router/#configuration","title":"Configuration","text":""},{"location":"components/zenoh-router/#docker-compose-configuration","title":"Docker Compose Configuration","text":"<pre><code>zenoh-router:\n  container_name: zenoh-router\n  image: eclipse/zenoh:latest\n  restart: unless-stopped\n  ports:\n    - \"7447:7447\"  # Zenoh TCP\n    - \"8000:8000\"  # REST API\n  environment:\n    - RUST_LOG=debug\n  networks:\n    - zenoh-mqtt-net\n  command: |\n    --listen tcp/0.0.0.0:7447 --rest-http-port 8000\n</code></pre>"},{"location":"components/zenoh-router/#command-line-options","title":"Command-Line Options","text":"<p>The router is started with:</p> <pre><code>zenoh --listen tcp/0.0.0.0:7447 --rest-http-port 8000\n</code></pre> <p>Options explained:</p> <ul> <li><code>--listen tcp/0.0.0.0:7447</code>: Listen for TCP connections on port 7447</li> <li><code>--rest-http-port 8000</code>: Enable REST API on port 8000</li> </ul>"},{"location":"components/zenoh-router/#environment-variables","title":"Environment Variables","text":"<ul> <li><code>RUST_LOG=debug</code>: Enable debug logging for troubleshooting</li> </ul>"},{"location":"components/zenoh-router/#ports-and-endpoints","title":"Ports and Endpoints","text":"Port Protocol Purpose Access 7447 TCP Zenoh protocol communication All services 8000 HTTP REST API External access"},{"location":"components/zenoh-router/#rest-api-usage","title":"REST API Usage","text":""},{"location":"components/zenoh-router/#get-router-status","title":"Get Router Status","text":"<pre><code>curl http://localhost:8000/@/router/local\n</code></pre>"},{"location":"components/zenoh-router/#publish-a-message","title":"Publish a Message","text":"<pre><code>curl -X PUT http://localhost:8000/demo/sensor/temp \\\n  -H 'Content-Type: application/json' \\\n  -d '{\"temperature\": 25.5}'\n</code></pre>"},{"location":"components/zenoh-router/#query-data","title":"Query Data","text":"<pre><code>curl http://localhost:8000/demo/sensor/*\n</code></pre>"},{"location":"components/zenoh-router/#subscribe-via-rest-sse","title":"Subscribe via REST (SSE)","text":"<pre><code>curl http://localhost:8000/demo/sensor/* \\\n  -H 'Accept: text/event-stream'\n</code></pre>"},{"location":"components/zenoh-router/#integration-with-other-components","title":"Integration with Other Components","text":""},{"location":"components/zenoh-router/#mqtt-bridge-connection","title":"MQTT Bridge Connection","text":"<p>The MQTT bridge connects to the router:</p> <pre><code>{\n  mode: \"client\",\n  connect: {\n    endpoints: [\"tcp/zenoh-router:7447\"]\n  }\n}\n</code></pre>"},{"location":"components/zenoh-router/#ros2-bridge-connection","title":"ROS2 Bridge Connection","text":"<p>The ROS2 bridge connects similarly:</p> <pre><code>{\n  mode: \"client\",\n  connect: {\n    endpoints: [\"tcp/zenoh-router:7447\"]\n  }\n}\n</code></pre>"},{"location":"components/zenoh-router/#external-clients","title":"External Clients","text":"<p>Python clients connect from the host:</p> <pre><code>import zenoh\n\nsession = zenoh.open(zenoh.Config())\n# Automatically discovers router on localhost:7447\n</code></pre>"},{"location":"components/zenoh-router/#monitoring-and-logging","title":"Monitoring and Logging","text":""},{"location":"components/zenoh-router/#view-logs","title":"View Logs","text":"<pre><code># Real-time logs\ndocker-compose logs -f zenoh-router\n\n# Search for specific messages\ndocker-compose logs zenoh-router | grep -i \"error\\|warn\"\n</code></pre>"},{"location":"components/zenoh-router/#log-levels","title":"Log Levels","text":"<p>Configure log level via <code>RUST_LOG</code>:</p> <ul> <li><code>error</code>: Only errors</li> <li><code>warn</code>: Warnings and errors</li> <li><code>info</code>: General information</li> <li><code>debug</code>: Detailed debugging</li> <li><code>trace</code>: Very verbose tracing</li> </ul>"},{"location":"components/zenoh-router/#health-check","title":"Health Check","text":"<p>Check if the router is running:</p> <pre><code># Check container status\ndocker ps | grep zenoh-router\n\n# Test REST API\ncurl http://localhost:8000/@/router/local\n\n# Test TCP connection\nnc -zv localhost 7447\n</code></pre>"},{"location":"components/zenoh-router/#performance-considerations","title":"Performance Considerations","text":""},{"location":"components/zenoh-router/#message-throughput","title":"Message Throughput","text":"<p>The Zenoh router can handle:</p> <ul> <li>1M+ messages/second on modern hardware</li> <li>Sub-millisecond latency for local routing</li> <li>Thousands of concurrent subscriptions</li> </ul>"},{"location":"components/zenoh-router/#resource-usage","title":"Resource Usage","text":"<p>Typical resource consumption:</p> <ul> <li>Memory: 50-100 MB base, scales with data</li> <li>CPU: &lt; 2% idle, scales with message rate</li> <li>Network: Efficient zero-copy operations</li> </ul>"},{"location":"components/zenoh-router/#optimization-tips","title":"Optimization Tips","text":"<ol> <li>Use TCP for high throughput: More efficient than REST</li> <li>Enable batching: Combine multiple small messages</li> <li>Tune buffer sizes: Adjust for your workload</li> <li>Monitor metrics: Use REST API to track performance</li> </ol>"},{"location":"components/zenoh-router/#troubleshooting","title":"Troubleshooting","text":""},{"location":"components/zenoh-router/#router-not-starting","title":"Router Not Starting","text":"<p>Symptom: Container exits immediately</p> <p>Solution: <pre><code># Check logs\ndocker-compose logs zenoh-router\n\n# Verify port availability\nnetstat -tuln | grep 7447\nnetstat -tuln | grep 8000\n\n# Restart with different ports if needed\n</code></pre></p>"},{"location":"components/zenoh-router/#clients-cant-connect","title":"Clients Can't Connect","text":"<p>Symptom: Bridges or clients fail to connect</p> <p>Solution: <pre><code># Verify router is running\ndocker ps | grep zenoh-router\n\n# Check network connectivity\ndocker exec zenoh-mqtt-bridge ping -c 2 zenoh-router\n\n# Test TCP port\ndocker exec zenoh-mqtt-bridge nc -zv zenoh-router 7447\n</code></pre></p>"},{"location":"components/zenoh-router/#high-memory-usage","title":"High Memory Usage","text":"<p>Symptom: Router consuming excessive memory</p> <p>Solution: <pre><code># Check statistics via REST API\ncurl http://localhost:8000/@/router/local\n\n# Restart router to clear cache\ndocker-compose restart zenoh-router\n\n# Consider configuring storage limits\n</code></pre></p>"},{"location":"components/zenoh-router/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"components/zenoh-router/#custom-configuration-file","title":"Custom Configuration File","text":"<p>For advanced scenarios, create a Zenoh configuration file:</p> <pre><code>{\n  mode: \"router\",\n\n  listen: {\n    endpoints: [\"tcp/0.0.0.0:7447\"]\n  },\n\n  plugins: {\n    rest: {\n      http_port: 8000\n    },\n    storage_manager: {\n      volumes: {\n        memory: {\n          key_expr: \"demo/**\",\n          volume_cfg: {\n            backend: \"memory\",\n            max_memory_mb: 256\n          }\n        }\n      }\n    }\n  }\n}\n</code></pre> <p>Use it with:</p> <pre><code>zenoh-router:\n  volumes:\n    - ./zenoh/router-config.json5:/etc/zenoh/config.json5\n  command: \"-c /etc/zenoh/config.json5\"\n</code></pre>"},{"location":"components/zenoh-router/#mesh-network-setup","title":"Mesh Network Setup","text":"<p>Connect multiple routers:</p> <pre><code>{\n  mode: \"router\",\n\n  connect: {\n    endpoints: [\"tcp/router2:7447\", \"tcp/router3:7447\"]\n  }\n}\n</code></pre>"},{"location":"components/zenoh-router/#security","title":"Security","text":""},{"location":"components/zenoh-router/#network-security","title":"Network Security","text":"<ul> <li>Runs in isolated Docker network</li> <li>Only exposed ports accessible from host</li> <li>Consider TLS for production deployments</li> </ul>"},{"location":"components/zenoh-router/#access-control","title":"Access Control","text":"<ul> <li>REST API has no authentication by default</li> <li>Consider using reverse proxy with auth</li> <li>Implement network-level security</li> </ul>"},{"location":"components/zenoh-router/#best-practices","title":"Best Practices","text":"<ol> <li>Monitoring: Regularly check REST API for health</li> <li>Logging: Keep debug logs during development</li> <li>Updates: Keep router image updated</li> <li>Backup: Store configuration files in version control</li> <li>Testing: Test router under load before production</li> </ol>"},{"location":"components/zenoh-router/#see-also","title":"See Also","text":"<ul> <li>Zenoh-MQTT Bridge</li> <li>Zenoh-ROS2DDS Bridge</li> <li>Architecture Overview</li> <li>Official Zenoh Documentation</li> </ul>"},{"location":"configuration/docker-compose/","title":"Docker Compose Configuration","text":"<p>The <code>docker-compose.yaml</code> file orchestrates all services.</p> <p>See Getting Started for usage.</p>"},{"location":"configuration/mqtt-bridge/","title":"MQTT Bridge Configuration","text":"<p>Configuration guide for the Zenoh-MQTT bridge.</p> <p>See Zenoh-MQTT Bridge Component for detailed information.</p>"},{"location":"configuration/overview/","title":"Configuration Overview","text":"<p>This guide provides an overview of configuration options for the Zenoh Multi-Protocol Bridge system.</p>"},{"location":"configuration/overview/#configuration-files","title":"Configuration Files","text":"<p>The system uses multiple configuration files:</p> File Purpose Format <code>docker-compose.yaml</code> Service orchestration YAML <code>zenoh-mqtt-bridge/config.json5</code> MQTT bridge settings JSON5 <code>zenoh-ros2dds-bridge/config.json5</code> ROS2 bridge settings JSON5 <code>mosquitto/config/mosquitto.conf</code> MQTT broker config INI-style"},{"location":"configuration/overview/#quick-configuration","title":"Quick Configuration","text":""},{"location":"configuration/overview/#changing-ports","title":"Changing Ports","text":"<p>Edit <code>docker-compose.yaml</code>:</p> <pre><code>services:\n  service-name:\n    ports:\n      - \"NEW_HOST_PORT:CONTAINER_PORT\"\n</code></pre>"},{"location":"configuration/overview/#adjusting-log-levels","title":"Adjusting Log Levels","text":"<pre><code>environment:\n  - RUST_LOG=info  # Options: error, warn, info, debug, trace\n</code></pre>"},{"location":"configuration/overview/#modifying-bridge-scopes","title":"Modifying Bridge Scopes","text":"<p>Edit <code>zenoh-mqtt-bridge/config.json5</code>:</p> <pre><code>{\n  plugins: {\n    mqtt: {\n      scope: \"your/custom/scope\"\n    }\n  }\n}\n</code></pre>"},{"location":"configuration/overview/#see-also","title":"See Also","text":"<ul> <li>MQTT Bridge Configuration</li> <li>ROS2 Bridge Configuration</li> <li>Docker Compose Configuration</li> </ul>"},{"location":"configuration/ros2-bridge/","title":"ROS2 Bridge Configuration","text":"<p>Configuration guide for the Zenoh-ROS2DDS bridge.</p> <p>See Zenoh-ROS2DDS Bridge Component for detailed information.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will walk you through the installation process of the Zenoh Multi-Protocol Bridge system.</p>"},{"location":"getting-started/installation/#quick-installation","title":"Quick Installation","text":"<p>The fastest way to get started is using Docker Compose:</p> <pre><code># Clone the repository\ngit clone https://github.com/harunkurtdev/zenoh-multi-bridge.git\ncd zenoh-multi-bridge\n\n# Start all services\ndocker-compose up -d\n\n# Verify all containers are running\ndocker-compose ps\n</code></pre> <p>That's it! All services should now be running.</p>"},{"location":"getting-started/installation/#step-by-step-installation","title":"Step-by-Step Installation","text":""},{"location":"getting-started/installation/#1-clone-the-repository","title":"1. Clone the Repository","text":"<p>First, clone the project repository from GitHub:</p> <pre><code>git clone https://github.com/harunkurtdev/zenoh-multi-bridge.git\ncd zenoh-multi-bridge\n</code></pre>"},{"location":"getting-started/installation/#2-review-configuration-files","title":"2. Review Configuration Files","text":"<p>Before starting the services, you may want to review the configuration files:</p> <pre><code># View the main docker-compose configuration\ncat docker-compose.yaml\n\n# View MQTT bridge configuration\ncat zenoh-mqtt-bridge/config.json5\n\n# View ROS2 bridge configuration\ncat zenoh-ros2dds-bridge/config.json5\n</code></pre> <p>Configuration details are explained in the Configuration section.</p>"},{"location":"getting-started/installation/#3-build-custom-images","title":"3. Build Custom Images","text":"<p>Some services use custom Docker images that need to be built:</p> <pre><code># Build all custom images\ndocker-compose build\n\n# Or build specific services\ndocker-compose build ros2-humble\ndocker-compose build zenoh-ros2dds-bridge\ndocker-compose build node-red\ndocker-compose build zenoh-subscriber\n</code></pre>"},{"location":"getting-started/installation/#4-start-the-services","title":"4. Start the Services","text":"<p>Start all services in detached mode:</p> <pre><code>docker-compose up -d\n</code></pre> <p>This command will:</p> <ul> <li>Pull required Docker images (if not already present)</li> <li>Build custom images (if needed)</li> <li>Create a dedicated network (<code>zenoh-mqtt-net</code>)</li> <li>Start all services in the background</li> </ul>"},{"location":"getting-started/installation/#5-verify-installation","title":"5. Verify Installation","text":"<p>Check that all services are running:</p> <pre><code>docker-compose ps\n</code></pre> <p>You should see all services in the \"Up\" state:</p> <pre><code>NAME                    IMAGE                              STATUS\nmosquitto               eclipse-mosquitto:latest           Up\nzenoh-router            eclipse/zenoh:latest               Up\nros2-humble             zenoh-multi-bridge-ros2-humble     Up\nzenoh-ros2dds-bridge    zenoh-multi-bridge-zenoh-ros2...   Up\nros2-humble-pub         zenoh-multi-bridge-ros2-humble     Up\nnode-red                zenoh-multi-bridge-node-red        Up\nzenoh-mqtt-bridge       eclipse/zenoh-bridge-mqtt:latest   Up\nmqtt-publisher          eclipse-mosquitto:latest           Up\nmqtt-subscriber         eclipse-mosquitto:latest           Up\nzenoh-subscriber        zenoh-multi-bridge-zenoh-sub...    Up\n</code></pre>"},{"location":"getting-started/installation/#6-check-service-logs","title":"6. Check Service Logs","text":"<p>Monitor the logs to ensure everything is working correctly:</p> <pre><code># View all logs\ndocker-compose logs -f\n\n# View specific service logs\ndocker-compose logs -f zenoh-router\ndocker-compose logs -f zenoh-mqtt-bridge\ndocker-compose logs -f zenoh-ros2dds-bridge\ndocker-compose logs -f mqtt-publisher\n</code></pre> <p>Press <code>Ctrl+C</code> to stop following logs.</p>"},{"location":"getting-started/installation/#accessing-web-interfaces","title":"Accessing Web Interfaces","text":"<p>Once all services are running, you can access the web interfaces:</p> Service URL Description Node-RED http://localhost:1880 Visual flow editor and dashboard Zenoh REST API http://localhost:8000 Zenoh router REST interface MQTT Bridge API http://localhost:8001 MQTT bridge REST API ROS2 Bridge API http://localhost:8002 ROS2 bridge REST API Foxglove Studio http://localhost:8765 ROS2 web visualization"},{"location":"getting-started/installation/#testing-the-installation","title":"Testing the Installation","text":""},{"location":"getting-started/installation/#test-mqtt-communication","title":"Test MQTT Communication","text":"<p>Test MQTT message publishing and subscribing:</p> <pre><code># Subscribe to MQTT topic (in one terminal)\ndocker exec -it mqtt-subscriber mosquitto_sub -h mosquitto -t 'test/topic' -v\n\n# Publish a message (in another terminal)\ndocker exec -it mosquitto mosquitto_pub -h mosquitto -t 'test/topic' -m 'Hello MQTT!'\n</code></pre>"},{"location":"getting-started/installation/#test-zenoh-communication","title":"Test Zenoh Communication","text":"<p>If you have Python and Zenoh installed on your host:</p> <pre><code># Terminal 1: Subscribe to Zenoh\npython3 sub.py\n\n# Terminal 2: Publish to Zenoh\npython3 pub.py\n</code></pre>"},{"location":"getting-started/installation/#test-multi-protocol-bridge","title":"Test Multi-Protocol Bridge","text":"<p>Publish an MQTT message and verify it reaches Zenoh:</p> <pre><code># Terminal 1: Watch Zenoh subscriber logs\ndocker-compose logs -f zenoh-subscriber\n\n# Terminal 2: Publish MQTT message to bridge\nmosquitto_pub -h localhost -p 1884 -t 'sensor/test' -m '{\"value\": 42}'\n</code></pre> <p>You should see the message appear in the Zenoh subscriber logs.</p>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#containers-not-starting","title":"Containers Not Starting","text":"<p>If containers fail to start, check the logs:</p> <pre><code>docker-compose logs [service-name]\n</code></pre> <p>Common issues:</p> <ol> <li>Port conflicts: Ensure required ports are not in use</li> <li>Insufficient resources: Docker needs adequate CPU and memory</li> <li>Permission issues: Ensure your user is in the <code>docker</code> group</li> </ol>"},{"location":"getting-started/installation/#port-already-in-use","title":"Port Already in Use","text":"<p>If you get a port conflict error:</p> <pre><code># Find which process is using the port\nlsof -i :PORT_NUMBER\n\n# Stop the conflicting process or modify docker-compose.yaml\n# to use different host ports\n</code></pre>"},{"location":"getting-started/installation/#docker-permission-denied","title":"Docker Permission Denied","text":"<p>If you get permission errors:</p> <pre><code># Add your user to the docker group\nsudo usermod -aG docker $USER\n\n# Log out and back in, or run:\nnewgrp docker\n</code></pre>"},{"location":"getting-started/installation/#services-not-connecting","title":"Services Not Connecting","text":"<p>If services can't connect to each other:</p> <ol> <li> <p>Verify the network is created:    <pre><code>docker network ls | grep zenoh-mqtt-net\n</code></pre></p> </li> <li> <p>Check container DNS resolution:    <pre><code>docker exec zenoh-mqtt-bridge ping -c 2 zenoh-router\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#updating-the-installation","title":"Updating the Installation","text":"<p>To update to the latest version:</p> <pre><code># Stop all services\ndocker-compose down\n\n# Pull latest changes\ngit pull origin main\n\n# Rebuild images\ndocker-compose build\n\n# Start services\ndocker-compose up -d\n</code></pre>"},{"location":"getting-started/installation/#uninstalling","title":"Uninstalling","text":"<p>To completely remove the installation:</p> <pre><code># Stop and remove all containers, networks, and volumes\ndocker-compose down -v\n\n# Remove Docker images\ndocker-compose down --rmi all\n\n# Remove the repository\ncd ..\nrm -rf zenoh-multi-bridge\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Learn how to use the system</li> <li>Configuration - Customize the setup</li> <li>Testing - Run comprehensive tests</li> </ul>"},{"location":"getting-started/prerequisites/","title":"Prerequisites","text":"<p>Before setting up the Zenoh Multi-Protocol Bridge, ensure you have the following prerequisites installed on your system.</p>"},{"location":"getting-started/prerequisites/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/prerequisites/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>CPU: 2 cores</li> <li>RAM: 4 GB</li> <li>Storage: 10 GB free space</li> <li>OS: Linux (Ubuntu 20.04+), macOS (10.15+), or Windows 10/11 with WSL2</li> </ul>"},{"location":"getting-started/prerequisites/#recommended-requirements","title":"Recommended Requirements","text":"<ul> <li>CPU: 4+ cores</li> <li>RAM: 8 GB or more</li> <li>Storage: 20 GB free space</li> <li>Network: Stable internet connection for downloading Docker images</li> </ul>"},{"location":"getting-started/prerequisites/#required-software","title":"Required Software","text":""},{"location":"getting-started/prerequisites/#docker-and-docker-compose","title":"Docker and Docker Compose","text":"<p>The project is containerized using Docker, so you need Docker and Docker Compose installed.</p> Ubuntu/DebianmacOSWindows <pre><code># Update package index\nsudo apt-get update\n\n# Install Docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n\n# Add your user to docker group\nsudo usermod -aG docker $USER\n\n# Install Docker Compose\nsudo apt-get install docker-compose-plugin\n\n# Verify installation\ndocker --version\ndocker compose version\n</code></pre> <pre><code># Install Docker Desktop for Mac\n# Download from: https://www.docker.com/products/docker-desktop\n\n# Or using Homebrew\nbrew install --cask docker\n\n# Verify installation\ndocker --version\ndocker compose version\n</code></pre> <pre><code># Install Docker Desktop for Windows\n# Download from: https://www.docker.com/products/docker-desktop\n\n# Or using Chocolatey\nchoco install docker-desktop\n\n# Verify installation (in PowerShell)\ndocker --version\ndocker compose version\n</code></pre>"},{"location":"getting-started/prerequisites/#git","title":"Git","text":"<p>Git is required to clone the repository.</p> Ubuntu/DebianmacOSWindows <pre><code>sudo apt-get update\nsudo apt-get install git\ngit --version\n</code></pre> <pre><code># Git comes with Xcode Command Line Tools\nxcode-select --install\n\n# Or using Homebrew\nbrew install git\ngit --version\n</code></pre> <pre><code># Download Git for Windows\n# https://git-scm.com/download/win\n\n# Or using Chocolatey\nchoco install git\ngit --version\n</code></pre>"},{"location":"getting-started/prerequisites/#optional-tools","title":"Optional Tools","text":""},{"location":"getting-started/prerequisites/#python-3-for-test-scripts","title":"Python 3 (for test scripts)","text":"<p>Python 3.8+ is required if you want to run the external test scripts (<code>pub.py</code> and <code>sub.py</code>).</p> <pre><code># Ubuntu/Debian\nsudo apt-get install python3 python3-pip\n\n# macOS\nbrew install python3\n\n# Windows\n# Download from: https://www.python.org/downloads/\n</code></pre> <p>Install Zenoh Python library:</p> <pre><code>pip3 install zenoh\n</code></pre>"},{"location":"getting-started/prerequisites/#mqtt-clients","title":"MQTT Clients","text":"<p>For testing MQTT communication, you might want to install MQTT client tools.</p> <pre><code># Ubuntu/Debian\nsudo apt-get install mosquitto-clients\n\n# macOS\nbrew install mosquitto\n\n# Windows\n# Download from: https://mosquitto.org/download/\n</code></pre>"},{"location":"getting-started/prerequisites/#ros2-optional","title":"ROS2 (Optional)","text":"<p>If you want to interact with ROS2 topics from your host machine (not required for running the project):</p> <pre><code># Ubuntu 22.04 (Jammy)\nsudo apt install software-properties-common\nsudo add-apt-repository universe\nsudo apt update &amp;&amp; sudo apt install curl -y\n\n# Add ROS2 GPG key\nsudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg\n\n# Add repository\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;&amp; echo $UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list &gt; /dev/null\n\n# Install ROS2 Humble\nsudo apt update\nsudo apt install ros-humble-desktop\n</code></pre>"},{"location":"getting-started/prerequisites/#network-configuration","title":"Network Configuration","text":""},{"location":"getting-started/prerequisites/#port-availability","title":"Port Availability","text":"<p>Ensure the following ports are available on your system:</p> Port Service Protocol 1880 Node-RED HTTP 1883 Mosquitto MQTT MQTT 1884 MQTT Bridge MQTT 7447 Zenoh Router Zenoh/TCP 7449 ROS2 Bridge Zenoh/TCP 8000 Zenoh REST API HTTP 8001 MQTT Bridge API HTTP 8002 ROS2 Bridge API HTTP 8765 Foxglove Bridge WebSocket 9001 Mosquitto WebSocket WebSocket <p>Check if ports are in use:</p> <pre><code># Linux/macOS\nnetstat -tuln | grep -E '1880|1883|1884|7447|7449|8000|8001|8002|8765|9001'\n\n# Or using lsof\nlsof -i :1880 -i :1883 -i :1884 -i :7447 -i :7449 -i :8000 -i :8001 -i :8002 -i :8765 -i :9001\n</code></pre>"},{"location":"getting-started/prerequisites/#firewall-configuration","title":"Firewall Configuration","text":"<p>If you're running a firewall, you may need to allow traffic on the required ports:</p> <pre><code># Ubuntu/Debian (UFW)\nsudo ufw allow 1880/tcp\nsudo ufw allow 1883/tcp\nsudo ufw allow 1884/tcp\nsudo ufw allow 7447/tcp\nsudo ufw allow 7449/tcp\nsudo ufw allow 8000/tcp\nsudo ufw allow 8001/tcp\nsudo ufw allow 8002/tcp\nsudo ufw allow 8765/tcp\nsudo ufw allow 9001/tcp\n</code></pre>"},{"location":"getting-started/prerequisites/#verification","title":"Verification","text":"<p>After installing all prerequisites, verify your setup:</p> <pre><code># Check Docker\ndocker --version\ndocker compose version\ndocker ps\n\n# Check Git\ngit --version\n\n# Check Python (optional)\npython3 --version\npip3 --version\n\n# Check MQTT client (optional)\nmosquitto_pub --help\n</code></pre>"},{"location":"getting-started/prerequisites/#next-steps","title":"Next Steps","text":"<p>Once you have all prerequisites installed, proceed to the Installation guide to set up the Zenoh Multi-Protocol Bridge.</p>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get up and running with the Zenoh Multi-Protocol Bridge in minutes.</p>"},{"location":"getting-started/quick-start/#starting-the-system","title":"Starting the System","text":""},{"location":"getting-started/quick-start/#start-all-services","title":"Start All Services","text":"<pre><code>cd zenoh-multi-bridge\ndocker-compose up -d\n</code></pre>"},{"location":"getting-started/quick-start/#verify-services-are-running","title":"Verify Services Are Running","text":"<pre><code>docker-compose ps\n</code></pre> <p>All services should show \"Up\" status.</p>"},{"location":"getting-started/quick-start/#basic-usage-examples","title":"Basic Usage Examples","text":""},{"location":"getting-started/quick-start/#example-1-mqtt-to-zenoh-bridge","title":"Example 1: MQTT to Zenoh Bridge","text":"<p>This example demonstrates how MQTT messages are automatically bridged to Zenoh.</p> <p>Step 1: Watch Zenoh Subscriber</p> <pre><code># Monitor the Zenoh subscriber logs\ndocker-compose logs -f zenoh-subscriber\n</code></pre> <p>Step 2: Publish MQTT Message</p> <p>In another terminal:</p> <pre><code># Publish to the MQTT bridge\nmosquitto_pub -h localhost -p 1884 -t 'sensor/temperature' \\\n  -m '{\"temp\":25.5,\"humidity\":60,\"timestamp\":\"2024-01-01T12:00:00Z\"}'\n</code></pre> <p>Expected Result: You should see the message in the Zenoh subscriber logs with the key <code>mqtt/demo/sensor/temperature</code>.</p>"},{"location":"getting-started/quick-start/#example-2-monitor-multi-protocol-data-flow","title":"Example 2: Monitor Multi-Protocol Data Flow","text":"<p>Step 1: Start Monitoring</p> <p>Open multiple terminals to monitor different parts of the system:</p> <pre><code># Terminal 1: MQTT Subscriber\ndocker-compose logs -f mqtt-subscriber\n\n# Terminal 2: Zenoh Subscriber\ndocker-compose logs -f zenoh-subscriber\n\n# Terminal 3: MQTT Publisher (shows what's being sent)\ndocker-compose logs -f mqtt-publisher\n</code></pre> <p>Observation: The automatic MQTT publisher sends sensor data every second, and you can see it flowing through both MQTT and Zenoh subscribers.</p>"},{"location":"getting-started/quick-start/#example-3-ros2-integration","title":"Example 3: ROS2 Integration","text":"<p>Step 1: Check ROS2 Topics</p> <pre><code># Access the ROS2 container\ndocker exec -it ros2-humble bash\n\n# Inside the container, list available topics\nros2 topic list\n\n# Monitor a specific topic\nros2 topic echo /chatter\n</code></pre> <p>Step 2: View Bridged Data</p> <p>The Zenoh-ROS2DDS bridge creates topics under the <code>/bot1</code> namespace. You should see topics like:</p> <ul> <li><code>/chatter</code></li> <li><code>/bot1/*</code> (if any data is bridged to the bot1 namespace)</li> </ul>"},{"location":"getting-started/quick-start/#example-4-node-red-visualization","title":"Example 4: Node-RED Visualization","text":"<p>Step 1: Access Node-RED</p> <p>Open your browser and navigate to http://localhost:1880</p> <p>Step 2: View Existing Flows</p> <p>The Node-RED interface should display any pre-configured flows for monitoring MQTT and Zenoh data.</p> <p>Step 3: Create a Simple Dashboard</p> <ol> <li>Click the hamburger menu (\u2630) in the top right</li> <li>Select \"Dashboard\" to open the dashboard view</li> <li>Navigate to http://localhost:1880/ui to see your dashboard</li> </ol>"},{"location":"getting-started/quick-start/#using-test-scripts","title":"Using Test Scripts","text":"<p>The repository includes Python test scripts for direct Zenoh interaction.</p>"},{"location":"getting-started/quick-start/#setup-if-not-already-done","title":"Setup (if not already done)","text":"<pre><code># Install Zenoh Python library\npip3 install zenoh\n</code></pre>"},{"location":"getting-started/quick-start/#run-subscriber","title":"Run Subscriber","text":"<pre><code># Subscribe to all Zenoh messages\npython3 sub.py\n</code></pre>"},{"location":"getting-started/quick-start/#run-publisher","title":"Run Publisher","text":"<p>In another terminal:</p> <pre><code># Publish a message to Zenoh\npython3 pub.py\n</code></pre> <p>You should see the message appear in the subscriber terminal.</p>"},{"location":"getting-started/quick-start/#web-interfaces-quick-access","title":"Web Interfaces Quick Access","text":"Interface URL Use Case Node-RED http://localhost:1880 Create flows and visualizations Node-RED Dashboard http://localhost:1880/ui View real-time data dashboards Zenoh REST API http://localhost:8000 Query Zenoh router status MQTT Bridge API http://localhost:8001 Monitor MQTT bridge status ROS2 Bridge API http://localhost:8002 Check ROS2 bridge configuration Foxglove Studio http://localhost:8765 Visualize ROS2 topics"},{"location":"getting-started/quick-start/#common-commands","title":"Common Commands","text":""},{"location":"getting-started/quick-start/#view-logs","title":"View Logs","text":"<pre><code># All services\ndocker-compose logs -f\n\n# Specific service\ndocker-compose logs -f zenoh-router\ndocker-compose logs -f zenoh-mqtt-bridge\ndocker-compose logs -f zenoh-ros2dds-bridge\n</code></pre>"},{"location":"getting-started/quick-start/#restart-services","title":"Restart Services","text":"<pre><code># Restart all services\ndocker-compose restart\n\n# Restart specific service\ndocker-compose restart zenoh-router\n</code></pre>"},{"location":"getting-started/quick-start/#stop-services","title":"Stop Services","text":"<pre><code># Stop all services\ndocker-compose stop\n\n# Stop specific service\ndocker-compose stop mqtt-publisher\n</code></pre>"},{"location":"getting-started/quick-start/#startstop-individual-services","title":"Start/Stop Individual Services","text":"<pre><code># Stop the automatic publisher\ndocker-compose stop mqtt-publisher\n\n# Start it again\ndocker-compose start mqtt-publisher\n</code></pre>"},{"location":"getting-started/quick-start/#testing-multi-protocol-communication","title":"Testing Multi-Protocol Communication","text":""},{"location":"getting-started/quick-start/#test-1-mqtt-zenoh-flow","title":"Test 1: MQTT \u2192 Zenoh Flow","text":"<pre><code># Terminal 1: Subscribe to Zenoh\npython3 sub.py\n\n# Terminal 2: Publish to MQTT (via bridge)\nmosquitto_pub -h localhost -p 1884 -t 'test/data' -m 'Hello from MQTT!'\n</code></pre> <p>Expected: Message appears in Zenoh subscriber with key <code>mqtt/demo/test/data</code></p>"},{"location":"getting-started/quick-start/#test-2-cross-protocol-monitoring","title":"Test 2: Cross-Protocol Monitoring","text":"<pre><code># Terminal 1: MQTT subscriber\nmosquitto_sub -h localhost -p 1883 -t 'sensor/#' -v\n\n# Terminal 2: Zenoh subscriber  \ndocker-compose logs -f zenoh-subscriber\n\n# Terminal 3: Publish via MQTT bridge\nmosquitto_pub -h localhost -p 1884 -t 'sensor/demo' -m '{\"value\":123}'\n</code></pre> <p>Expected: Message appears in both MQTT and Zenoh subscribers</p>"},{"location":"getting-started/quick-start/#test-3-ros2-zenoh-bridge","title":"Test 3: ROS2 \u2192 Zenoh Bridge","text":"<pre><code># Terminal 1: Monitor Zenoh\npython3 sub.py\n\n# Terminal 2: Publish ROS2 message\ndocker exec -it ros2-humble bash\nros2 topic pub /test std_msgs/msg/String \"data: 'Hello ROS2'\" -1\n</code></pre> <p>Expected: Message bridged to Zenoh with key matching the ROS2 topic</p>"},{"location":"getting-started/quick-start/#quick-troubleshooting","title":"Quick Troubleshooting","text":""},{"location":"getting-started/quick-start/#services-not-starting","title":"Services Not Starting","text":"<pre><code># Check which service failed\ndocker-compose ps\n\n# View error logs\ndocker-compose logs [service-name]\n</code></pre>"},{"location":"getting-started/quick-start/#no-data-flowing","title":"No Data Flowing","text":"<pre><code># Verify MQTT bridge is connected\ndocker-compose logs zenoh-mqtt-bridge | grep -i connect\n\n# Verify ROS2 bridge is connected\ndocker-compose logs zenoh-ros2dds-bridge | grep -i connect\n\n# Check Zenoh router\ndocker-compose logs zenoh-router\n</code></pre>"},{"location":"getting-started/quick-start/#port-conflicts","title":"Port Conflicts","text":"<pre><code># Check if ports are in use\nnetstat -tuln | grep -E '1880|1883|7447|8000'\n\n# Modify docker-compose.yaml to use different ports if needed\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you have the basic system running, explore more advanced features:</p> <ul> <li>Architecture Overview: Understand the system design</li> <li>Components: Deep dive into each component</li> <li>Configuration: Customize the system</li> <li>Testing: Run comprehensive tests</li> <li>Use Cases: Explore practical applications</li> </ul>"},{"location":"getting-started/quick-start/#stopping-the-system","title":"Stopping the System","text":"<p>When you're done:</p> <pre><code># Stop all services\ndocker-compose down\n\n# Stop and remove volumes (removes persistent data)\ndocker-compose down -v\n</code></pre>"},{"location":"getting-started/quick-start/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the Troubleshooting guide</li> <li>Review service logs: <code>docker-compose logs [service-name]</code></li> <li>Open an issue on GitHub</li> </ol>"},{"location":"usage/monitoring/","title":"Monitoring","text":"<p>Monitoring the system using Node-RED and REST APIs.</p> <p>See API Endpoints for REST API monitoring.</p>"},{"location":"usage/multi-protocol/","title":"Multi-Protocol Communication","text":"<p>Using multiple protocols together.</p>"},{"location":"usage/multi-protocol/#mqtt-to-zenoh","title":"MQTT to Zenoh","text":"<p>See the Quick Start Guide.</p>"},{"location":"usage/multi-protocol/#zenoh-to-ros2","title":"Zenoh to ROS2","text":"<p>Communication between Zenoh and ROS2 networks.</p>"},{"location":"usage/testing/","title":"Testing","text":"<p>How to test the Zenoh Multi-Protocol Bridge system.</p> <p>See Quick Start Guide for testing examples.</p>"},{"location":"use-cases/hybrid-communication/","title":"Hybrid Communication Systems","text":"<p>Integrating legacy MQTT infrastructure with modern protocols.</p>"},{"location":"use-cases/hybrid-communication/#overview","title":"Overview","text":"<p>Connect existing MQTT-based systems with Zenoh and ROS2.</p>"},{"location":"use-cases/hybrid-communication/#use-cases","title":"Use Cases","text":"<ul> <li>Legacy system integration</li> <li>Gradual migration to modern protocols</li> <li>Protocol-agnostic application development</li> </ul>"},{"location":"use-cases/industrial/","title":"Industrial Automation","text":"<p>SCADA systems integration with robot controllers.</p>"},{"location":"use-cases/industrial/#applications","title":"Applications","text":"<ul> <li>Factory automation</li> <li>Process control</li> <li>Real-time monitoring and control dashboards</li> </ul>"},{"location":"use-cases/iot-robotics/","title":"IoT-Robotics Integration","text":"<p>Connecting IoT sensors to robot control systems.</p>"},{"location":"use-cases/iot-robotics/#overview","title":"Overview","text":"<p>This use case demonstrates how sensor data from IoT devices (MQTT) can be used by robot control systems (ROS2).</p>"},{"location":"use-cases/iot-robotics/#benefits","title":"Benefits","text":"<ul> <li>Real-time environmental data for autonomous robots</li> <li>Seamless integration of IoT and robotics platforms</li> <li>Unified data flow across protocols</li> </ul>"},{"location":"use-cases/research/","title":"Research and Development Platform","text":"<p>Multi-protocol testing and research environment.</p>"},{"location":"use-cases/research/#applications","title":"Applications","text":"<ul> <li>Performance comparison between protocols</li> <li>Development sandbox for distributed systems</li> <li>Educational platform for protocol bridging</li> </ul>"},{"location":"use-cases/smart-city/","title":"Smart City Applications","text":"<p>IoT sensors and autonomous vehicles communication.</p>"},{"location":"use-cases/smart-city/#applications","title":"Applications","text":"<ul> <li>Traffic management systems</li> <li>Environmental monitoring</li> <li>Smart infrastructure</li> </ul>"}]}